/*
* generated by Xtext
*/
grammar InternalModuleDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.ModuleDslGrammarAccess;

}

@parser::members {

 	private ModuleDslGrammarAccess grammarAccess;
 	
    public InternalModuleDslParser(TokenStream input, ModuleDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "LANGUAGE";	
   	}
   	
   	@Override
   	protected ModuleDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleLANGUAGE
entryRuleLANGUAGE returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLANGUAGERule()); }
	 iv_ruleLANGUAGE=ruleLANGUAGE 
	 { $current=$iv_ruleLANGUAGE.current; } 
	 EOF 
;

// Rule LANGUAGE
ruleLANGUAGE returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getLANGUAGEAccess().getModulesMODULE_DECLParserRuleCall_0()); 
	    }
		lv_modules_0_0=ruleMODULE_DECL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLANGUAGERule());
	        }
       		add(
       			$current, 
       			"modules",
        		lv_modules_0_0, 
        		"MODULE_DECL");
	        afterParserOrEnumRuleCall();
	    }

)
)+
;





// Entry rule entryRuleMODULE_DECL
entryRuleMODULE_DECL returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMODULE_DECLRule()); }
	 iv_ruleMODULE_DECL=ruleMODULE_DECL 
	 { $current=$iv_ruleMODULE_DECL.current; } 
	 EOF 
;

// Rule MODULE_DECL
ruleMODULE_DECL returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='module' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMODULE_DECLAccess().getModuleKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getMODULE_DECLAccess().getMODULE_DECLAction_1(),
            $current);
    }
)(
(
		lv_name_2_0=RULE_IDENT
		{
			newLeafNode(lv_name_2_0, grammarAccess.getMODULE_DECLAccess().getNameIDENTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMODULE_DECLRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"IDENT");
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMODULE_DECLAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMODULE_DECLAccess().getStrategySTRATEGYParserRuleCall_4_0()); 
	    }
		lv_strategy_4_0=ruleSTRATEGY		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMODULE_DECLRule());
	        }
       		set(
       			$current, 
       			"strategy",
        		lv_strategy_4_0, 
        		"STRATEGY");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMODULE_DECLAccess().getInterfaceINTERFACEParserRuleCall_5_0()); 
	    }
		lv_interface_5_0=ruleINTERFACE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMODULE_DECLRule());
	        }
       		set(
       			$current, 
       			"interface",
        		lv_interface_5_0, 
        		"INTERFACE");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMODULE_DECLAccess().getBodyBODYParserRuleCall_6_0()); 
	    }
		lv_body_6_0=ruleBODY		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMODULE_DECLRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_6_0, 
        		"BODY");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMODULE_DECLAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleSTRATEGY
entryRuleSTRATEGY returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSTRATEGYRule()); }
	 iv_ruleSTRATEGY=ruleSTRATEGY 
	 { $current=$iv_ruleSTRATEGY.current; } 
	 EOF 
;

// Rule STRATEGY
ruleSTRATEGY returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSTRATEGYAccess().getCommercialAtKeyword_0());
    }
	otherlv_1='strategy' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSTRATEGYAccess().getStrategyKeyword_1());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getSTRATEGYAccess().getSTRATEGYAction_2(),
            $current);
    }
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSTRATEGYAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSTRATEGYAccess().getCritdeclCRITERION_DECLParserRuleCall_4_0()); 
	    }
		lv_critdecl_4_0=ruleCRITERION_DECL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSTRATEGYRule());
	        }
       		set(
       			$current, 
       			"critdecl",
        		lv_critdecl_4_0, 
        		"CRITERION_DECL");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSTRATEGYAccess().getDataseldeclDATASEL_DECLParserRuleCall_5_0()); 
	    }
		lv_dataseldecl_5_0=ruleDATASEL_DECL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSTRATEGYRule());
	        }
       		set(
       			$current, 
       			"dataseldecl",
        		lv_dataseldecl_5_0, 
        		"DATASEL_DECL");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSTRATEGYAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleINTERFACE
entryRuleINTERFACE returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getINTERFACERule()); }
	 iv_ruleINTERFACE=ruleINTERFACE 
	 { $current=$iv_ruleINTERFACE.current; } 
	 EOF 
;

// Rule INTERFACE
ruleINTERFACE returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getINTERFACEAccess().getCommercialAtKeyword_0());
    }
	otherlv_1='interface' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getINTERFACEAccess().getInterfaceKeyword_1());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getINTERFACEAccess().getINTERFACEAction_2(),
            $current);
    }
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getINTERFACEAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getINTERFACEAccess().getDeclarationAbstractVAR_DECLParserRuleCall_4_0()); 
	    }
		lv_declaration_4_0=ruleAbstractVAR_DECL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getINTERFACERule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_4_0, 
        		"AbstractVAR_DECL");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getINTERFACEAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleBODY
entryRuleBODY returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBODYRule()); }
	 iv_ruleBODY=ruleBODY 
	 { $current=$iv_ruleBODY.current; } 
	 EOF 
;

// Rule BODY
ruleBODY returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBODYAccess().getCommercialAtKeyword_0());
    }
	otherlv_1='body' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBODYAccess().getBodyKeyword_1());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getBODYAccess().getBODYAction_2(),
            $current);
    }
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBODYAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBODYAccess().getStatementsSTATEMENTParserRuleCall_4_0()); 
	    }
		lv_statements_4_0=ruleSTATEMENT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBODYRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_4_0, 
        		"STATEMENT");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getBODYAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleCRITERION_DECL
entryRuleCRITERION_DECL returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCRITERION_DECLRule()); }
	 iv_ruleCRITERION_DECL=ruleCRITERION_DECL 
	 { $current=$iv_ruleCRITERION_DECL.current; } 
	 EOF 
;

// Rule CRITERION_DECL
ruleCRITERION_DECL returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='crit' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCRITERION_DECLAccess().getCritKeyword_0());
    }
	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCRITERION_DECLAccess().getColonKeyword_1());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getCRITERION_DECLAccess().getCRITERION_DECLAction_2(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCRITERION_DECLAccess().getCritCRITERIONParserRuleCall_3_0()); 
	    }
		lv_crit_3_0=ruleCRITERION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCRITERION_DECLRule());
	        }
       		set(
       			$current, 
       			"crit",
        		lv_crit_3_0, 
        		"CRITERION");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCRITERION_DECLAccess().getSemicolonKeyword_4());
    }
)?)
;





// Entry rule entryRuleDATASEL_DECL
entryRuleDATASEL_DECL returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDATASEL_DECLRule()); }
	 iv_ruleDATASEL_DECL=ruleDATASEL_DECL 
	 { $current=$iv_ruleDATASEL_DECL.current; } 
	 EOF 
;

// Rule DATASEL_DECL
ruleDATASEL_DECL returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='datasel' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDATASEL_DECLAccess().getDataselKeyword_0());
    }
	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDATASEL_DECLAccess().getColonKeyword_1());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getDATASEL_DECLAccess().getDATASEL_DECLAction_2(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDATASEL_DECLAccess().getData1DATASELParserRuleCall_3_0()); 
	    }
		lv_data1_3_0=ruleDATASEL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDATASEL_DECLRule());
	        }
       		set(
       			$current, 
       			"data1",
        		lv_data1_3_0, 
        		"DATASEL");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDATASEL_DECLAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDATASEL_DECLAccess().getData2DATASELParserRuleCall_4_1_0()); 
	    }
		lv_data2_5_0=ruleDATASEL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDATASEL_DECLRule());
	        }
       		set(
       			$current, 
       			"data2",
        		lv_data2_5_0, 
        		"DATASEL");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDATASEL_DECLAccess().getSemicolonKeyword_5());
    }
)?)
;





// Entry rule entryRuleCRITERION
entryRuleCRITERION returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCRITERIONRule()); }
	 iv_ruleCRITERION=ruleCRITERION 
	 { $current=$iv_ruleCRITERION.current; } 
	 EOF 
;

// Rule CRITERION
ruleCRITERION returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_crit_0_1=	'mcdc' 
    {
        newLeafNode(lv_crit_0_1, grammarAccess.getCRITERIONAccess().getCritMcdcKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCRITERIONRule());
	        }
       		setWithLastConsumed($current, "crit", lv_crit_0_1, null);
	    }

    |		lv_crit_0_2=	'dc' 
    {
        newLeafNode(lv_crit_0_2, grammarAccess.getCRITERIONAccess().getCritDcKeyword_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCRITERIONRule());
	        }
       		setWithLastConsumed($current, "crit", lv_crit_0_2, null);
	    }

    |		lv_crit_0_3=	'cc' 
    {
        newLeafNode(lv_crit_0_3, grammarAccess.getCRITERIONAccess().getCritCcKeyword_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCRITERIONRule());
	        }
       		setWithLastConsumed($current, "crit", lv_crit_0_3, null);
	    }

)

)
)
;





// Entry rule entryRuleDATASEL
entryRuleDATASEL returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDATASELRule()); }
	 iv_ruleDATASEL=ruleDATASEL 
	 { $current=$iv_ruleDATASEL.current; } 
	 EOF 
;

// Rule DATASEL
ruleDATASEL returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_sel_0_1=	'rand' 
    {
        newLeafNode(lv_sel_0_1, grammarAccess.getDATASELAccess().getSelRandKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDATASELRule());
	        }
       		setWithLastConsumed($current, "sel", lv_sel_0_1, null);
	    }

    |		lv_sel_0_2=	'eqv' 
    {
        newLeafNode(lv_sel_0_2, grammarAccess.getDATASELAccess().getSelEqvKeyword_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDATASELRule());
	        }
       		setWithLastConsumed($current, "sel", lv_sel_0_2, null);
	    }

    |		lv_sel_0_3=	'bv' 
    {
        newLeafNode(lv_sel_0_3, grammarAccess.getDATASELAccess().getSelBvKeyword_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDATASELRule());
	        }
       		setWithLastConsumed($current, "sel", lv_sel_0_3, null);
	    }

)

)
)
;





// Entry rule entryRuleAbstractVAR_DECL
entryRuleAbstractVAR_DECL returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractVAR_DECLRule()); }
	 iv_ruleAbstractVAR_DECL=ruleAbstractVAR_DECL 
	 { $current=$iv_ruleAbstractVAR_DECL.current; } 
	 EOF 
;

// Rule AbstractVAR_DECL
ruleAbstractVAR_DECL returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAbstractVAR_DECLAccess().getVAR_DECLParserRuleCall_0()); 
    }
    this_VAR_DECL_0=ruleVAR_DECL
    { 
        $current = $this_VAR_DECL_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractVAR_DECLAccess().getTmpVAR_DECLParserRuleCall_1()); 
    }
    this_TmpVAR_DECL_1=ruleTmpVAR_DECL
    { 
        $current = $this_TmpVAR_DECL_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractVAR_DECLAccess().getCST_DECLParserRuleCall_2()); 
    }
    this_CST_DECL_2=ruleCST_DECL
    { 
        $current = $this_CST_DECL_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVAR_DECL
entryRuleVAR_DECL returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVAR_DECLRule()); }
	 iv_ruleVAR_DECL=ruleVAR_DECL 
	 { $current=$iv_ruleVAR_DECL.current; } 
	 EOF 
;

// Rule VAR_DECL
ruleVAR_DECL returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getVAR_DECLAccess().getVAR_DECLAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVAR_DECLAccess().getFlowFlowParserRuleCall_1_0()); 
	    }
		lv_flow_1_0=ruleFlow		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVAR_DECLRule());
	        }
       		set(
       			$current, 
       			"flow",
        		lv_flow_1_0, 
        		"Flow");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_2_0=RULE_IDENT
		{
			newLeafNode(lv_name_2_0, grammarAccess.getVAR_DECLAccess().getNameIDENTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVAR_DECLRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"IDENT");
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVAR_DECLAccess().getColonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVAR_DECLAccess().getTypeTYPEParserRuleCall_4_0()); 
	    }
		lv_type_4_0=ruleTYPE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVAR_DECLRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"TYPE");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVAR_DECLAccess().getRangeRANGEParserRuleCall_5_0()); 
	    }
		lv_range_5_0=ruleRANGE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVAR_DECLRule());
	        }
       		set(
       			$current, 
       			"range",
        		lv_range_5_0, 
        		"RANGE");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getVAR_DECLAccess().getSemicolonKeyword_6());
    }
)?)
;





// Entry rule entryRuleFlow
entryRuleFlow returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFlowRule()); }
	 iv_ruleFlow=ruleFlow 
	 { $current=$iv_ruleFlow.current; } 
	 EOF 
;

// Rule Flow
ruleFlow returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_flow_0_1=	'in' 
    {
        newLeafNode(lv_flow_0_1, grammarAccess.getFlowAccess().getFlowInKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFlowRule());
	        }
       		setWithLastConsumed($current, "flow", lv_flow_0_1, null);
	    }

    |		lv_flow_0_2=	'out' 
    {
        newLeafNode(lv_flow_0_2, grammarAccess.getFlowAccess().getFlowOutKeyword_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFlowRule());
	        }
       		setWithLastConsumed($current, "flow", lv_flow_0_2, null);
	    }

    |		lv_flow_0_3=	'inout' 
    {
        newLeafNode(lv_flow_0_3, grammarAccess.getFlowAccess().getFlowInoutKeyword_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFlowRule());
	        }
       		setWithLastConsumed($current, "flow", lv_flow_0_3, null);
	    }

)

)
)
;





// Entry rule entryRuleCST_DECL
entryRuleCST_DECL returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCST_DECLRule()); }
	 iv_ruleCST_DECL=ruleCST_DECL 
	 { $current=$iv_ruleCST_DECL.current; } 
	 EOF 
;

// Rule CST_DECL
ruleCST_DECL returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCST_DECLAccess().getCST_DECLAction_0(),
            $current);
    }
)(
(
		lv_flow_1_0=	'const' 
    {
        newLeafNode(lv_flow_1_0, grammarAccess.getCST_DECLAccess().getFlowConstKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCST_DECLRule());
	        }
       		setWithLastConsumed($current, "flow", lv_flow_1_0, "const");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCST_DECLAccess().getTypeTYPEParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleTYPE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCST_DECLRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"TYPE");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_3_0=RULE_IDENT
		{
			newLeafNode(lv_name_3_0, grammarAccess.getCST_DECLAccess().getNameIDENTTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCST_DECLRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"IDENT");
	    }

)
)	otherlv_4='==' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCST_DECLAccess().getEqualsSignEqualsSignKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCST_DECLAccess().getValueLiteralParserRuleCall_5_0()); 
	    }
		lv_value_5_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCST_DECLRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getCST_DECLAccess().getSemicolonKeyword_6());
    }
)?)
;





// Entry rule entryRuleTmpVAR_DECL
entryRuleTmpVAR_DECL returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTmpVAR_DECLRule()); }
	 iv_ruleTmpVAR_DECL=ruleTmpVAR_DECL 
	 { $current=$iv_ruleTmpVAR_DECL.current; } 
	 EOF 
;

// Rule TmpVAR_DECL
ruleTmpVAR_DECL returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTmpVAR_DECLAccess().getTmpVAR_DECLAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTmpVAR_DECLAccess().getTypeTYPEParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleTYPE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTmpVAR_DECLRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"TYPE");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_2_0=RULE_IDENT
		{
			newLeafNode(lv_name_2_0, grammarAccess.getTmpVAR_DECLAccess().getNameIDENTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTmpVAR_DECLRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"IDENT");
	    }

)
)	otherlv_3='init' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTmpVAR_DECLAccess().getInitKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTmpVAR_DECLAccess().getValueEXPRESSIONParserRuleCall_4_0()); 
	    }
		lv_value_4_0=ruleEXPRESSION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTmpVAR_DECLRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"EXPRESSION");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTmpVAR_DECLAccess().getSemicolonKeyword_5());
    }
)?)
;





// Entry rule entryRuleTYPE
entryRuleTYPE returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTYPERule()); }
	 iv_ruleTYPE=ruleTYPE 
	 { $current=$iv_ruleTYPE.current; } 
	 EOF 
;

// Rule TYPE
ruleTYPE returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_type_0_1=	'int' 
    {
        newLeafNode(lv_type_0_1, grammarAccess.getTYPEAccess().getTypeIntKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTYPERule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_1, null);
	    }

    |		lv_type_0_2=	'real' 
    {
        newLeafNode(lv_type_0_2, grammarAccess.getTYPEAccess().getTypeRealKeyword_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTYPERule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_2, null);
	    }

    |		lv_type_0_3=	'bool' 
    {
        newLeafNode(lv_type_0_3, grammarAccess.getTYPEAccess().getTypeBoolKeyword_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTYPERule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_3, null);
	    }

    |		lv_type_0_4=	'enum' 
    {
        newLeafNode(lv_type_0_4, grammarAccess.getTYPEAccess().getTypeEnumKeyword_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTYPERule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_4, null);
	    }

    |		lv_type_0_5=	'bit' 
    {
        newLeafNode(lv_type_0_5, grammarAccess.getTYPEAccess().getTypeBitKeyword_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTYPERule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_5, null);
	    }

    |		lv_type_0_6=	'hex' 
    {
        newLeafNode(lv_type_0_6, grammarAccess.getTYPEAccess().getTypeHexKeyword_0_5());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTYPERule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_6, null);
	    }

    |		lv_type_0_7=	'str' 
    {
        newLeafNode(lv_type_0_7, grammarAccess.getTYPEAccess().getTypeStrKeyword_0_6());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTYPERule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_7, null);
	    }

)

)
)
;





// Entry rule entryRuleRANGE
entryRuleRANGE returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRANGERule()); }
	 iv_ruleRANGE=ruleRANGE 
	 { $current=$iv_ruleRANGE.current; } 
	 EOF 
;

// Rule RANGE
ruleRANGE returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRANGEAccess().getINTERVALParserRuleCall_0()); 
    }
    this_INTERVAL_0=ruleINTERVAL
    { 
        $current = $this_INTERVAL_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRANGEAccess().getLSETParserRuleCall_1()); 
    }
    this_LSET_1=ruleLSET
    { 
        $current = $this_LSET_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleINTERVAL
entryRuleINTERVAL returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getINTERVALRule()); }
	 iv_ruleINTERVAL=ruleINTERVAL 
	 { $current=$iv_ruleINTERVAL.current; } 
	 EOF 
;

// Rule INTERVAL
ruleINTERVAL returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_lsqbr_0_1=	']' 
    {
        newLeafNode(lv_lsqbr_0_1, grammarAccess.getINTERVALAccess().getLsqbrRightSquareBracketKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getINTERVALRule());
	        }
       		setWithLastConsumed($current, "lsqbr", lv_lsqbr_0_1, null);
	    }

    |		lv_lsqbr_0_2=	'[' 
    {
        newLeafNode(lv_lsqbr_0_2, grammarAccess.getINTERVALAccess().getLsqbrLeftSquareBracketKeyword_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getINTERVALRule());
	        }
       		setWithLastConsumed($current, "lsqbr", lv_lsqbr_0_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getINTERVALAccess().getMinLiteralParserRuleCall_1_0()); 
	    }
		lv_min_1_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getINTERVALRule());
	        }
       		set(
       			$current, 
       			"min",
        		lv_min_1_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='..' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getINTERVALAccess().getFullStopFullStopKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getINTERVALAccess().getMaxLiteralParserRuleCall_3_0()); 
	    }
		lv_max_3_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getINTERVALRule());
	        }
       		set(
       			$current, 
       			"max",
        		lv_max_3_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
(
		lv_rsqbr_4_1=	']' 
    {
        newLeafNode(lv_rsqbr_4_1, grammarAccess.getINTERVALAccess().getRsqbrRightSquareBracketKeyword_4_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getINTERVALRule());
	        }
       		setWithLastConsumed($current, "rsqbr", lv_rsqbr_4_1, null);
	    }

    |		lv_rsqbr_4_2=	'[' 
    {
        newLeafNode(lv_rsqbr_4_2, grammarAccess.getINTERVALAccess().getRsqbrLeftSquareBracketKeyword_4_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getINTERVALRule());
	        }
       		setWithLastConsumed($current, "rsqbr", lv_rsqbr_4_2, null);
	    }

)

)
))
;





// Entry rule entryRuleLSET
entryRuleLSET returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLSETRule()); }
	 iv_ruleLSET=ruleLSET 
	 { $current=$iv_ruleLSET.current; } 
	 EOF 
;

// Rule LSET
ruleLSET returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLSETAccess().getLeftCurlyBracketKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getLSETAccess().getLSETAction_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLSETAccess().getValueLiteralParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLSETRule());
	        }
       		add(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLSETAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLSETAccess().getValueLiteralParserRuleCall_3_1_0()); 
	    }
		lv_value_4_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLSETRule());
	        }
       		add(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getLSETAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralAccess().getIntLITERALAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralAccess().getValueINTEGERParserRuleCall_0_1_0()); 
	    }
		lv_value_1_0=ruleINTEGER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"INTEGER");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralAccess().getRealLITERALAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralAccess().getValueDECIMALParserRuleCall_1_1_0()); 
	    }
		lv_value_3_0=ruleDECIMAL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"DECIMAL");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralAccess().getBoolLITERALAction_2_0(),
            $current);
    }
)(
(
		lv_value_5_0=RULE_BOOLEAN
		{
			newLeafNode(lv_value_5_0, grammarAccess.getLiteralAccess().getValueBOOLEANTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"BOOLEAN");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralAccess().getStrLITERALAction_3_0(),
            $current);
    }
)(
(
		lv_value_7_0=RULE_STRING
		{
			newLeafNode(lv_value_7_0, grammarAccess.getLiteralAccess().getValueSTRINGTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_7_0, 
        		"STRING");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralAccess().getEnumLITERALAction_4_0(),
            $current);
    }
)(
(
		lv_value_9_0=RULE_ENUM_ELEMENT
		{
			newLeafNode(lv_value_9_0, grammarAccess.getLiteralAccess().getValueENUM_ELEMENTTerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_9_0, 
        		"ENUM_ELEMENT");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralAccess().getBitLITERALAction_5_0(),
            $current);
    }
)(
(
		lv_value_11_0=RULE_BIT
		{
			newLeafNode(lv_value_11_0, grammarAccess.getLiteralAccess().getValueBITTerminalRuleCall_5_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_11_0, 
        		"BIT");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralAccess().getHexLITERALAction_6_0(),
            $current);
    }
)(
(
		lv_value_13_0=RULE_HEX
		{
			newLeafNode(lv_value_13_0, grammarAccess.getLiteralAccess().getValueHEXTerminalRuleCall_6_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_13_0, 
        		"HEX");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralAccess().getUnknowLITERALAction_7_0(),
            $current);
    }
)(
(
		lv_value_15_0=	'?' 
    {
        newLeafNode(lv_value_15_0, grammarAccess.getLiteralAccess().getValueQuestionMarkKeyword_7_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_15_0, "?");
	    }

)
)))
;





// Entry rule entryRuleSTATEMENT
entryRuleSTATEMENT returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSTATEMENTRule()); }
	 iv_ruleSTATEMENT=ruleSTATEMENT 
	 { $current=$iv_ruleSTATEMENT.current; } 
	 EOF 
;

// Rule STATEMENT
ruleSTATEMENT returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSTATEMENTAccess().getAbstractVAR_DECLParserRuleCall_0()); 
    }
    this_AbstractVAR_DECL_0=ruleAbstractVAR_DECL
    { 
        $current = $this_AbstractVAR_DECL_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSTATEMENTAccess().getIF_STATEMENTParserRuleCall_1()); 
    }
    this_IF_STATEMENT_1=ruleIF_STATEMENT
    { 
        $current = $this_IF_STATEMENT_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSTATEMENTAccess().getLOOP_STATEMENTParserRuleCall_2()); 
    }
    this_LOOP_STATEMENT_2=ruleLOOP_STATEMENT
    { 
        $current = $this_LOOP_STATEMENT_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSTATEMENTAccess().getASSIGN_STATEMENTParserRuleCall_3()); 
    }
    this_ASSIGN_STATEMENT_3=ruleASSIGN_STATEMENT
    { 
        $current = $this_ASSIGN_STATEMENT_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSTATEMENTAccess().getERROR_STATEMENTParserRuleCall_4()); 
    }
    this_ERROR_STATEMENT_4=ruleERROR_STATEMENT
    { 
        $current = $this_ERROR_STATEMENT_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleIF_STATEMENT
entryRuleIF_STATEMENT returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIF_STATEMENTRule()); }
	 iv_ruleIF_STATEMENT=ruleIF_STATEMENT 
	 { $current=$iv_ruleIF_STATEMENT.current; } 
	 EOF 
;

// Rule IF_STATEMENT
ruleIF_STATEMENT returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIF_STATEMENTAccess().getIfKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIF_STATEMENTAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIF_STATEMENTAccess().getIfCondEXPRESSIONParserRuleCall_2_0()); 
	    }
		lv_ifCond_2_0=ruleEXPRESSION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIF_STATEMENTRule());
	        }
       		set(
       			$current, 
       			"ifCond",
        		lv_ifCond_2_0, 
        		"EXPRESSION");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIF_STATEMENTAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIF_STATEMENTAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIF_STATEMENTAccess().getIfstSTATEMENTParserRuleCall_5_0()); 
	    }
		lv_ifst_5_0=ruleSTATEMENT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIF_STATEMENTRule());
	        }
       		add(
       			$current, 
       			"ifst",
        		lv_ifst_5_0, 
        		"STATEMENT");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getIF_STATEMENTAccess().getRightCurlyBracketKeyword_6());
    }
(((	'else' 
)=>	otherlv_7='else' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getIF_STATEMENTAccess().getElseKeyword_7_0());
    }
)	otherlv_8='{' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getIF_STATEMENTAccess().getLeftCurlyBracketKeyword_7_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIF_STATEMENTAccess().getElstSTATEMENTParserRuleCall_7_2_0()); 
	    }
		lv_elst_9_0=ruleSTATEMENT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIF_STATEMENTRule());
	        }
       		add(
       			$current, 
       			"elst",
        		lv_elst_9_0, 
        		"STATEMENT");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getIF_STATEMENTAccess().getRightCurlyBracketKeyword_7_3());
    }
))
;





// Entry rule entryRuleLOOP_STATEMENT
entryRuleLOOP_STATEMENT returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLOOP_STATEMENTRule()); }
	 iv_ruleLOOP_STATEMENT=ruleLOOP_STATEMENT 
	 { $current=$iv_ruleLOOP_STATEMENT.current; } 
	 EOF 
;

// Rule LOOP_STATEMENT
ruleLOOP_STATEMENT returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='loop' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLOOP_STATEMENTAccess().getLoopKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLOOP_STATEMENTAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLOOP_STATEMENTAccess().getLoopCondEXPRESSIONParserRuleCall_2_0()); 
	    }
		lv_loopCond_2_0=ruleEXPRESSION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLOOP_STATEMENTRule());
	        }
       		set(
       			$current, 
       			"loopCond",
        		lv_loopCond_2_0, 
        		"EXPRESSION");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLOOP_STATEMENTAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleERROR_STATEMENT
entryRuleERROR_STATEMENT returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getERROR_STATEMENTRule()); }
	 iv_ruleERROR_STATEMENT=ruleERROR_STATEMENT 
	 { $current=$iv_ruleERROR_STATEMENT.current; } 
	 EOF 
;

// Rule ERROR_STATEMENT
ruleERROR_STATEMENT returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='error' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getERROR_STATEMENTAccess().getErrorKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getERROR_STATEMENTAccess().getERROR_STATEMENTAction_1(),
            $current);
    }
)(	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getERROR_STATEMENTAccess().getSemicolonKeyword_2());
    }
)?)
;





// Entry rule entryRuleASSIGN_STATEMENT
entryRuleASSIGN_STATEMENT returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getASSIGN_STATEMENTRule()); }
	 iv_ruleASSIGN_STATEMENT=ruleASSIGN_STATEMENT 
	 { $current=$iv_ruleASSIGN_STATEMENT.current; } 
	 EOF 
;

// Rule ASSIGN_STATEMENT
ruleASSIGN_STATEMENT returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getASSIGN_STATEMENTAccess().getLeftVAR_REFParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleVAR_REF		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getASSIGN_STATEMENTRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"VAR_REF");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getASSIGN_STATEMENTAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getASSIGN_STATEMENTAccess().getRightEXPRESSIONParserRuleCall_2_0()); 
	    }
		lv_right_2_0=ruleEXPRESSION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getASSIGN_STATEMENTRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_2_0, 
        		"EXPRESSION");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getASSIGN_STATEMENTAccess().getSemicolonKeyword_3());
    }
)?)
;





// Entry rule entryRuleVAR_REF
entryRuleVAR_REF returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVAR_REFRule()); }
	 iv_ruleVAR_REF=ruleVAR_REF 
	 { $current=$iv_ruleVAR_REF.current; } 
	 EOF 
;

// Rule VAR_REF
ruleVAR_REF returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVAR_REFRule());
	        }
        }
	otherlv_0=RULE_IDENT
	{
		newLeafNode(otherlv_0, grammarAccess.getVAR_REFAccess().getVariableAbstractVAR_DECLCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleEXPRESSION
entryRuleEXPRESSION returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEXPRESSIONRule()); }
	 iv_ruleEXPRESSION=ruleEXPRESSION 
	 { $current=$iv_ruleEXPRESSION.current; } 
	 EOF 
;

// Rule EXPRESSION
ruleEXPRESSION returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getEXPRESSIONAccess().getORParserRuleCall()); 
    }
    this_OR_0=ruleOR
    { 
        $current = $this_OR_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleOR
entryRuleOR returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getORRule()); }
	 iv_ruleOR=ruleOR 
	 { $current=$iv_ruleOR.current; } 
	 EOF 
;

// Rule OR
ruleOR returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getORAccess().getANDParserRuleCall_0()); 
    }
    this_AND_0=ruleAND
    { 
        $current = $this_AND_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getORAccess().getORLeftAction_1_0(),
            $current);
    }
)	otherlv_2='or' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getORAccess().getOrKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getORAccess().getRightANDParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAND		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getORRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"AND");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAND
entryRuleAND returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getANDRule()); }
	 iv_ruleAND=ruleAND 
	 { $current=$iv_ruleAND.current; } 
	 EOF 
;

// Rule AND
ruleAND returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getANDAccess().getEQUAL_DIFFParserRuleCall_0()); 
    }
    this_EQUAL_DIFF_0=ruleEQUAL_DIFF
    { 
        $current = $this_EQUAL_DIFF_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getANDAccess().getANDLeftAction_1_0(),
            $current);
    }
)	otherlv_2='and' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getANDAccess().getAndKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getANDAccess().getRightEQUAL_DIFFParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleEQUAL_DIFF		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getANDRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"EQUAL_DIFF");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleEQUAL_DIFF
entryRuleEQUAL_DIFF returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEQUAL_DIFFRule()); }
	 iv_ruleEQUAL_DIFF=ruleEQUAL_DIFF 
	 { $current=$iv_ruleEQUAL_DIFF.current; } 
	 EOF 
;

// Rule EQUAL_DIFF
ruleEQUAL_DIFF returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEQUAL_DIFFAccess().getCOMPARISONParserRuleCall_0()); 
    }
    this_COMPARISON_0=ruleCOMPARISON
    { 
        $current = $this_COMPARISON_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getEQUAL_DIFFAccess().getEQUAL_DIFFLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'==' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getEQUAL_DIFFAccess().getOpEqualsSignEqualsSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEQUAL_DIFFRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'!=' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getEQUAL_DIFFAccess().getOpExclamationMarkEqualsSignKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEQUAL_DIFFRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEQUAL_DIFFAccess().getRightCOMPARISONParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleCOMPARISON		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEQUAL_DIFFRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"COMPARISON");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleCOMPARISON
entryRuleCOMPARISON returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCOMPARISONRule()); }
	 iv_ruleCOMPARISON=ruleCOMPARISON 
	 { $current=$iv_ruleCOMPARISON.current; } 
	 EOF 
;

// Rule COMPARISON
ruleCOMPARISON returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCOMPARISONAccess().getADD_SUBParserRuleCall_0()); 
    }
    this_ADD_SUB_0=ruleADD_SUB
    { 
        $current = $this_ADD_SUB_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getCOMPARISONAccess().getCOMPARISONLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'<' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getCOMPARISONAccess().getOpLessThanSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCOMPARISONRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'<=' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getCOMPARISONAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCOMPARISONRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

    |		lv_op_2_3=	'>' 
    {
        newLeafNode(lv_op_2_3, grammarAccess.getCOMPARISONAccess().getOpGreaterThanSignKeyword_1_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCOMPARISONRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_3, null);
	    }

    |		lv_op_2_4=	'>=' 
    {
        newLeafNode(lv_op_2_4, grammarAccess.getCOMPARISONAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCOMPARISONRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_4, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCOMPARISONAccess().getRightADD_SUBParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleADD_SUB		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCOMPARISONRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"ADD_SUB");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleADD_SUB
entryRuleADD_SUB returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getADD_SUBRule()); }
	 iv_ruleADD_SUB=ruleADD_SUB 
	 { $current=$iv_ruleADD_SUB.current; } 
	 EOF 
;

// Rule ADD_SUB
ruleADD_SUB returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getADD_SUBAccess().getMULT_DIVParserRuleCall_0()); 
    }
    this_MULT_DIV_0=ruleMULT_DIV
    { 
        $current = $this_MULT_DIV_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getADD_SUBAccess().getADDLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='+' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getADD_SUBAccess().getPlusSignKeyword_1_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getADD_SUBAccess().getSUBLeftAction_1_0_1_0(),
            $current);
    }
)	otherlv_4='-' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getADD_SUBAccess().getHyphenMinusKeyword_1_0_1_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getADD_SUBAccess().getRightMULT_DIVParserRuleCall_1_1_0()); 
	    }
		lv_right_5_0=ruleMULT_DIV		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getADD_SUBRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_5_0, 
        		"MULT_DIV");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMULT_DIV
entryRuleMULT_DIV returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMULT_DIVRule()); }
	 iv_ruleMULT_DIV=ruleMULT_DIV 
	 { $current=$iv_ruleMULT_DIV.current; } 
	 EOF 
;

// Rule MULT_DIV
ruleMULT_DIV returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMULT_DIVAccess().getPrimaryExpressionParserRuleCall_0()); 
    }
    this_PrimaryExpression_0=rulePrimaryExpression
    { 
        $current = $this_PrimaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMULT_DIVAccess().getMULTLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='*' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMULT_DIVAccess().getAsteriskKeyword_1_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMULT_DIVAccess().getDIVLeftAction_1_0_1_0(),
            $current);
    }
)	otherlv_4='/' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMULT_DIVAccess().getSolidusKeyword_1_0_1_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getMULT_DIVAccess().getRightPrimaryExpressionParserRuleCall_1_1_0()); 
	    }
		lv_right_5_0=rulePrimaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMULT_DIVRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_5_0, 
        		"PrimaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getEXPRESSIONParserRuleCall_0_1()); 
    }
    this_EXPRESSION_1=ruleEXPRESSION
    { 
        $current = $this_EXPRESSION_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_2());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryExpressionAccess().getNOTAction_1_0(),
            $current);
    }
)	otherlv_4='not' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPrimaryExpressionAccess().getNotKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getExpPrimaryExpressionParserRuleCall_1_2_0()); 
	    }
		lv_exp_5_0=rulePrimaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_5_0, 
        		"PrimaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getAtomicParserRuleCall_2()); 
    }
    this_Atomic_6=ruleAtomic
    { 
        $current = $this_Atomic_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAtomic
entryRuleAtomic returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomicRule()); }
	 iv_ruleAtomic=ruleAtomic 
	 { $current=$iv_ruleAtomic.current; } 
	 EOF 
;

// Rule Atomic
ruleAtomic returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicAccess().getIntConstantAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicAccess().getValueINTEGERParserRuleCall_0_1_0()); 
	    }
		lv_value_1_0=ruleINTEGER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"INTEGER");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicAccess().getRealConstantAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicAccess().getValueDECIMALParserRuleCall_1_1_0()); 
	    }
		lv_value_3_0=ruleDECIMAL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"DECIMAL");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicAccess().getStrConstantAction_2_0(),
            $current);
    }
)(
(
		lv_value_5_0=RULE_STRING
		{
			newLeafNode(lv_value_5_0, grammarAccess.getAtomicAccess().getValueSTRINGTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"STRING");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicAccess().getEnumConstantAction_3_0(),
            $current);
    }
)(
(
		lv_value_7_0=RULE_ENUM_ELEMENT
		{
			newLeafNode(lv_value_7_0, grammarAccess.getAtomicAccess().getValueENUM_ELEMENTTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_7_0, 
        		"ENUM_ELEMENT");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicAccess().getBoolConstantAction_4_0(),
            $current);
    }
)(
(
		lv_value_9_0=RULE_BOOLEAN
		{
			newLeafNode(lv_value_9_0, grammarAccess.getAtomicAccess().getValueBOOLEANTerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_9_0, 
        		"BOOLEAN");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicAccess().getBitConstantAction_5_0(),
            $current);
    }
)(
(
		lv_value_11_0=RULE_BIT
		{
			newLeafNode(lv_value_11_0, grammarAccess.getAtomicAccess().getValueBITTerminalRuleCall_5_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_11_0, 
        		"BIT");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicAccess().getHexConstantAction_6_0(),
            $current);
    }
)(
(
		lv_value_13_0=RULE_HEX
		{
			newLeafNode(lv_value_13_0, grammarAccess.getAtomicAccess().getValueHEXTerminalRuleCall_6_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_13_0, 
        		"HEX");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicAccess().getVarExpRefAction_7_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicRule());
	        }
        }
	otherlv_15=RULE_IDENT
	{
		newLeafNode(otherlv_15, grammarAccess.getAtomicAccess().getVrefAbstractVAR_DECLCrossReference_7_1_0()); 
	}

)
)))
;





// Entry rule entryRuleDECIMAL
entryRuleDECIMAL returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDECIMALRule()); } 
	 iv_ruleDECIMAL=ruleDECIMAL 
	 { $current=$iv_ruleDECIMAL.current.getText(); }  
	 EOF 
;

// Rule DECIMAL
ruleDECIMAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDECIMALAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getDECIMALAccess().getINTTerminalRuleCall_1()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDECIMALAccess().getFullStopKeyword_2_0()); 
    }
    this_INT_3=RULE_INT    {
		$current.merge(this_INT_3);
    }

    { 
    newLeafNode(this_INT_3, grammarAccess.getDECIMALAccess().getINTTerminalRuleCall_2_1()); 
    }
))
    ;





// Entry rule entryRuleINTEGER
entryRuleINTEGER returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getINTEGERRule()); } 
	 iv_ruleINTEGER=ruleINTEGER 
	 { $current=$iv_ruleINTEGER.current.getText(); }  
	 EOF 
;

// Rule INTEGER
ruleINTEGER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getINTEGERAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getINTEGERAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





RULE_ENUM_ELEMENT : '_' RULE_IDENT;

RULE_BOOLEAN : ('true'|'false');

RULE_HEX : '0x' ('0'..'9'|'A'..'F')+;

RULE_IDENT : ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_BIT : '$' ('0'|'1')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


