/*
* generated by Xtext
*/
package org.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ModuleDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class LANGUAGEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LANGUAGE");
		private final Assignment cModulesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cModulesMODULE_DECLParserRuleCall_0 = (RuleCall)cModulesAssignment.eContents().get(0);
		
		//LANGUAGE:
		//
		//	modules+=MODULE_DECL+;
		public ParserRule getRule() { return rule; }

		//modules+=MODULE_DECL+
		public Assignment getModulesAssignment() { return cModulesAssignment; }

		//MODULE_DECL
		public RuleCall getModulesMODULE_DECLParserRuleCall_0() { return cModulesMODULE_DECLParserRuleCall_0; }
	}

	public class MODULE_DECLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MODULE_DECL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cMODULE_DECLAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDENTTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStrategyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStrategySTRATEGYParserRuleCall_4_0 = (RuleCall)cStrategyAssignment_4.eContents().get(0);
		private final Assignment cInterfaceAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cInterfaceINTERFACEParserRuleCall_5_0 = (RuleCall)cInterfaceAssignment_5.eContents().get(0);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyBODYParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		/// *
		//
		// * Constraints: Module name must be unique, 
		//
		// * If two "datasel" criteria are chosen, they must be distinct
		//
		// * / MODULE_DECL:
		//
		//	"module" {MODULE_DECL} name=IDENT "{" strategy=STRATEGY interface=INTERFACE body=BODY "}";
		public ParserRule getRule() { return rule; }

		//"module" {MODULE_DECL} name=IDENT "{" strategy=STRATEGY interface=INTERFACE body=BODY "}"
		public Group getGroup() { return cGroup; }

		//"module"
		public Keyword getModuleKeyword_0() { return cModuleKeyword_0; }

		//{MODULE_DECL}
		public Action getMODULE_DECLAction_1() { return cMODULE_DECLAction_1; }

		//name=IDENT
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_2_0() { return cNameIDENTTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//strategy=STRATEGY
		public Assignment getStrategyAssignment_4() { return cStrategyAssignment_4; }

		//STRATEGY
		public RuleCall getStrategySTRATEGYParserRuleCall_4_0() { return cStrategySTRATEGYParserRuleCall_4_0; }

		//interface=INTERFACE
		public Assignment getInterfaceAssignment_5() { return cInterfaceAssignment_5; }

		//INTERFACE
		public RuleCall getInterfaceINTERFACEParserRuleCall_5_0() { return cInterfaceINTERFACEParserRuleCall_5_0; }

		//body=BODY
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }

		//BODY
		public RuleCall getBodyBODYParserRuleCall_6_0() { return cBodyBODYParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class STRATEGYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "STRATEGY");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cStrategyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Action cSTRATEGYAction_2 = (Action)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCritdeclAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCritdeclCRITERION_DECLParserRuleCall_4_0 = (RuleCall)cCritdeclAssignment_4.eContents().get(0);
		private final Assignment cDataseldeclAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDataseldeclDATASEL_DECLParserRuleCall_5_0 = (RuleCall)cDataseldeclAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//STRATEGY:
		//
		//	"@" "strategy" {STRATEGY} "{" critdecl=CRITERION_DECL dataseldecl=DATASEL_DECL "}";
		public ParserRule getRule() { return rule; }

		//"@" "strategy" {STRATEGY} "{" critdecl=CRITERION_DECL dataseldecl=DATASEL_DECL "}"
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//"strategy"
		public Keyword getStrategyKeyword_1() { return cStrategyKeyword_1; }

		//{STRATEGY}
		public Action getSTRATEGYAction_2() { return cSTRATEGYAction_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//critdecl=CRITERION_DECL
		public Assignment getCritdeclAssignment_4() { return cCritdeclAssignment_4; }

		//CRITERION_DECL
		public RuleCall getCritdeclCRITERION_DECLParserRuleCall_4_0() { return cCritdeclCRITERION_DECLParserRuleCall_4_0; }

		//dataseldecl=DATASEL_DECL
		public Assignment getDataseldeclAssignment_5() { return cDataseldeclAssignment_5; }

		//DATASEL_DECL
		public RuleCall getDataseldeclDATASEL_DECLParserRuleCall_5_0() { return cDataseldeclDATASEL_DECLParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class INTERFACEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "INTERFACE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cInterfaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Action cINTERFACEAction_2 = (Action)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDeclarationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDeclarationAbstractVAR_DECLParserRuleCall_4_0 = (RuleCall)cDeclarationAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//INTERFACE:
		//
		//	"@" "interface" {INTERFACE} "{" declaration+=AbstractVAR_DECL+ "}";
		public ParserRule getRule() { return rule; }

		//"@" "interface" {INTERFACE} "{" declaration+=AbstractVAR_DECL+ "}"
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//"interface"
		public Keyword getInterfaceKeyword_1() { return cInterfaceKeyword_1; }

		//{INTERFACE}
		public Action getINTERFACEAction_2() { return cINTERFACEAction_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//declaration+=AbstractVAR_DECL+
		public Assignment getDeclarationAssignment_4() { return cDeclarationAssignment_4; }

		//AbstractVAR_DECL
		public RuleCall getDeclarationAbstractVAR_DECLParserRuleCall_4_0() { return cDeclarationAbstractVAR_DECLParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class BODYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BODY");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cBodyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Action cBODYAction_2 = (Action)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsSTATEMENTParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//BODY:
		//
		//	"@" "body" {BODY} "{" statements+=STATEMENT* "}";
		public ParserRule getRule() { return rule; }

		//"@" "body" {BODY} "{" statements+=STATEMENT* "}"
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//"body"
		public Keyword getBodyKeyword_1() { return cBodyKeyword_1; }

		//{BODY}
		public Action getBODYAction_2() { return cBODYAction_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//statements+=STATEMENT*
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }

		//STATEMENT
		public RuleCall getStatementsSTATEMENTParserRuleCall_4_0() { return cStatementsSTATEMENTParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class CRITERION_DECLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CRITERION_DECL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCritKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Action cCRITERION_DECLAction_2 = (Action)cGroup.eContents().get(2);
		private final Assignment cCritAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCritCRITERIONParserRuleCall_3_0 = (RuleCall)cCritAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CRITERION_DECL:
		//
		//	"crit" ":" {CRITERION_DECL} crit=CRITERION ";"?;
		public ParserRule getRule() { return rule; }

		//"crit" ":" {CRITERION_DECL} crit=CRITERION ";"?
		public Group getGroup() { return cGroup; }

		//"crit"
		public Keyword getCritKeyword_0() { return cCritKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//{CRITERION_DECL}
		public Action getCRITERION_DECLAction_2() { return cCRITERION_DECLAction_2; }

		//crit=CRITERION
		public Assignment getCritAssignment_3() { return cCritAssignment_3; }

		//CRITERION
		public RuleCall getCritCRITERIONParserRuleCall_3_0() { return cCritCRITERIONParserRuleCall_3_0; }

		//";"?
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class DATASEL_DECLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DATASEL_DECL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataselKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Action cDATASEL_DECLAction_2 = (Action)cGroup.eContents().get(2);
		private final Assignment cData1Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cData1DATASELParserRuleCall_3_0 = (RuleCall)cData1Assignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cData2Assignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cData2DATASELParserRuleCall_4_1_0 = (RuleCall)cData2Assignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DATASEL_DECL:
		//
		//	"datasel" ":" {DATASEL_DECL} data1=DATASEL ("," data2=DATASEL)? ";"?;
		public ParserRule getRule() { return rule; }

		//"datasel" ":" {DATASEL_DECL} data1=DATASEL ("," data2=DATASEL)? ";"?
		public Group getGroup() { return cGroup; }

		//"datasel"
		public Keyword getDataselKeyword_0() { return cDataselKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//{DATASEL_DECL}
		public Action getDATASEL_DECLAction_2() { return cDATASEL_DECLAction_2; }

		//data1=DATASEL
		public Assignment getData1Assignment_3() { return cData1Assignment_3; }

		//DATASEL
		public RuleCall getData1DATASELParserRuleCall_3_0() { return cData1DATASELParserRuleCall_3_0; }

		//("," data2=DATASEL)?
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//data2=DATASEL
		public Assignment getData2Assignment_4_1() { return cData2Assignment_4_1; }

		//DATASEL
		public RuleCall getData2DATASELParserRuleCall_4_1_0() { return cData2DATASELParserRuleCall_4_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class CRITERIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CRITERION");
		private final Assignment cCritAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cCritAlternatives_0 = (Alternatives)cCritAssignment.eContents().get(0);
		private final Keyword cCritMcdcKeyword_0_0 = (Keyword)cCritAlternatives_0.eContents().get(0);
		private final Keyword cCritDcKeyword_0_1 = (Keyword)cCritAlternatives_0.eContents().get(1);
		private final Keyword cCritCcKeyword_0_2 = (Keyword)cCritAlternatives_0.eContents().get(2);
		
		/// * 
		//
		// * Strategies to be used
		//
		// * / CRITERION:
		//
		//	crit=("mcdc" | "dc" | "cc");
		public ParserRule getRule() { return rule; }

		//crit=("mcdc" | "dc" | "cc")
		public Assignment getCritAssignment() { return cCritAssignment; }

		//"mcdc" | "dc" | "cc"
		public Alternatives getCritAlternatives_0() { return cCritAlternatives_0; }

		//"mcdc"
		public Keyword getCritMcdcKeyword_0_0() { return cCritMcdcKeyword_0_0; }

		//"dc"
		public Keyword getCritDcKeyword_0_1() { return cCritDcKeyword_0_1; }

		//"cc"
		public Keyword getCritCcKeyword_0_2() { return cCritCcKeyword_0_2; }
	}

	public class DATASELElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DATASEL");
		private final Assignment cSelAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cSelAlternatives_0 = (Alternatives)cSelAssignment.eContents().get(0);
		private final Keyword cSelRandKeyword_0_0 = (Keyword)cSelAlternatives_0.eContents().get(0);
		private final Keyword cSelEqvKeyword_0_1 = (Keyword)cSelAlternatives_0.eContents().get(1);
		private final Keyword cSelBvKeyword_0_2 = (Keyword)cSelAlternatives_0.eContents().get(2);
		
		/// *
		//
		// * Data selection policy
		//
		// * / DATASEL:
		//
		//	sel=("rand" | "eqv" | "bv");
		public ParserRule getRule() { return rule; }

		//sel=("rand" | "eqv" | "bv")
		public Assignment getSelAssignment() { return cSelAssignment; }

		//"rand" | "eqv" | "bv"
		public Alternatives getSelAlternatives_0() { return cSelAlternatives_0; }

		//"rand"
		public Keyword getSelRandKeyword_0_0() { return cSelRandKeyword_0_0; }

		//"eqv"
		public Keyword getSelEqvKeyword_0_1() { return cSelEqvKeyword_0_1; }

		//"bv"
		public Keyword getSelBvKeyword_0_2() { return cSelBvKeyword_0_2; }
	}

	public class AbstractVAR_DECLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractVAR_DECL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVAR_DECLParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTmpVAR_DECLParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCST_DECLParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		/// *
		//
		// * variables macros and instructions declaration
		//
		// * / / **
		//
		// * Variables declaration
		//
		// * Constraints: bool variable has no range
		//
		// * enum variable must enable a set of values
		//
		// * enum and string variables supports Set Range only
		//
		// * / AbstractVAR_DECL:
		//
		//	VAR_DECL | TmpVAR_DECL | CST_DECL;
		public ParserRule getRule() { return rule; }

		//VAR_DECL | TmpVAR_DECL | CST_DECL
		public Alternatives getAlternatives() { return cAlternatives; }

		//VAR_DECL
		public RuleCall getVAR_DECLParserRuleCall_0() { return cVAR_DECLParserRuleCall_0; }

		//TmpVAR_DECL
		public RuleCall getTmpVAR_DECLParserRuleCall_1() { return cTmpVAR_DECLParserRuleCall_1; }

		//CST_DECL
		public RuleCall getCST_DECLParserRuleCall_2() { return cCST_DECLParserRuleCall_2; }
	}

	public class VAR_DECLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VAR_DECL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVAR_DECLAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFlowAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFlowFlowParserRuleCall_1_0 = (RuleCall)cFlowAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDENTTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeTYPEParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Assignment cRangeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRangeRANGEParserRuleCall_5_0 = (RuleCall)cRangeAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//VAR_DECL:
		//
		//	{VAR_DECL} flow=Flow name=IDENT ":" type=TYPE range=RANGE? ";"?;
		public ParserRule getRule() { return rule; }

		//{VAR_DECL} flow=Flow name=IDENT ":" type=TYPE range=RANGE? ";"?
		public Group getGroup() { return cGroup; }

		//{VAR_DECL}
		public Action getVAR_DECLAction_0() { return cVAR_DECLAction_0; }

		//flow=Flow
		public Assignment getFlowAssignment_1() { return cFlowAssignment_1; }

		//Flow
		public RuleCall getFlowFlowParserRuleCall_1_0() { return cFlowFlowParserRuleCall_1_0; }

		//name=IDENT
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_2_0() { return cNameIDENTTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//type=TYPE
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//TYPE
		public RuleCall getTypeTYPEParserRuleCall_4_0() { return cTypeTYPEParserRuleCall_4_0; }

		//range=RANGE?
		public Assignment getRangeAssignment_5() { return cRangeAssignment_5; }

		//RANGE
		public RuleCall getRangeRANGEParserRuleCall_5_0() { return cRangeRANGEParserRuleCall_5_0; }

		//";"?
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class FlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Flow");
		private final Assignment cFlowAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cFlowAlternatives_0 = (Alternatives)cFlowAssignment.eContents().get(0);
		private final Keyword cFlowInKeyword_0_0 = (Keyword)cFlowAlternatives_0.eContents().get(0);
		private final Keyword cFlowOutKeyword_0_1 = (Keyword)cFlowAlternatives_0.eContents().get(1);
		private final Keyword cFlowInoutKeyword_0_2 = (Keyword)cFlowAlternatives_0.eContents().get(2);
		
		//Flow:
		//
		//	flow=("in" | "out" | "inout");
		public ParserRule getRule() { return rule; }

		//flow=("in" | "out" | "inout")
		public Assignment getFlowAssignment() { return cFlowAssignment; }

		//"in" | "out" | "inout"
		public Alternatives getFlowAlternatives_0() { return cFlowAlternatives_0; }

		//"in"
		public Keyword getFlowInKeyword_0_0() { return cFlowInKeyword_0_0; }

		//"out"
		public Keyword getFlowOutKeyword_0_1() { return cFlowOutKeyword_0_1; }

		//"inout"
		public Keyword getFlowInoutKeyword_0_2() { return cFlowInoutKeyword_0_2; }
	}

	public class CST_DECLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CST_DECL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCST_DECLAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFlowAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cFlowConstKeyword_1_0 = (Keyword)cFlowAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTYPEParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDENTTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueLiteralParserRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		/// *
		//
		// * Constant Values declaration
		//
		// * / CST_DECL:
		//
		//	{CST_DECL} flow="const" type=TYPE name=IDENT "==" value=Literal ";"?;
		public ParserRule getRule() { return rule; }

		//{CST_DECL} flow="const" type=TYPE name=IDENT "==" value=Literal ";"?
		public Group getGroup() { return cGroup; }

		//{CST_DECL}
		public Action getCST_DECLAction_0() { return cCST_DECLAction_0; }

		//flow="const"
		public Assignment getFlowAssignment_1() { return cFlowAssignment_1; }

		//"const"
		public Keyword getFlowConstKeyword_1_0() { return cFlowConstKeyword_1_0; }

		//type=TYPE
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//TYPE
		public RuleCall getTypeTYPEParserRuleCall_2_0() { return cTypeTYPEParserRuleCall_2_0; }

		//name=IDENT
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_3_0() { return cNameIDENTTerminalRuleCall_3_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_4() { return cEqualsSignEqualsSignKeyword_4; }

		//value=Literal
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }

		//Literal
		public RuleCall getValueLiteralParserRuleCall_5_0() { return cValueLiteralParserRuleCall_5_0; }

		//";"?
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class TmpVAR_DECLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TmpVAR_DECL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTmpVAR_DECLAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTYPEParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDENTTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cInitKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueEXPRESSIONParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TmpVAR_DECL:
		//
		//	{TmpVAR_DECL} type=TYPE name=IDENT "init" value=EXPRESSION ";"?;
		public ParserRule getRule() { return rule; }

		//{TmpVAR_DECL} type=TYPE name=IDENT "init" value=EXPRESSION ";"?
		public Group getGroup() { return cGroup; }

		//{TmpVAR_DECL}
		public Action getTmpVAR_DECLAction_0() { return cTmpVAR_DECLAction_0; }

		//type=TYPE
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//TYPE
		public RuleCall getTypeTYPEParserRuleCall_1_0() { return cTypeTYPEParserRuleCall_1_0; }

		//name=IDENT
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_2_0() { return cNameIDENTTerminalRuleCall_2_0; }

		//"init"
		public Keyword getInitKeyword_3() { return cInitKeyword_3; }

		//value=EXPRESSION
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//EXPRESSION
		public RuleCall getValueEXPRESSIONParserRuleCall_4_0() { return cValueEXPRESSIONParserRuleCall_4_0; }

		//";"?
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class TYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TYPE");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeAlternatives_0 = (Alternatives)cTypeAssignment.eContents().get(0);
		private final Keyword cTypeIntKeyword_0_0 = (Keyword)cTypeAlternatives_0.eContents().get(0);
		private final Keyword cTypeRealKeyword_0_1 = (Keyword)cTypeAlternatives_0.eContents().get(1);
		private final Keyword cTypeBoolKeyword_0_2 = (Keyword)cTypeAlternatives_0.eContents().get(2);
		private final Keyword cTypeEnumKeyword_0_3 = (Keyword)cTypeAlternatives_0.eContents().get(3);
		private final Keyword cTypeBitKeyword_0_4 = (Keyword)cTypeAlternatives_0.eContents().get(4);
		private final Keyword cTypeHexKeyword_0_5 = (Keyword)cTypeAlternatives_0.eContents().get(5);
		private final Keyword cTypeStrKeyword_0_6 = (Keyword)cTypeAlternatives_0.eContents().get(6);
		
		//TYPE:
		//
		//	type=("int" | "real" | "bool" | "enum" | "bit" | "hex" | "str");
		public ParserRule getRule() { return rule; }

		//type=("int" | "real" | "bool" | "enum" | "bit" | "hex" | "str")
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//"int" | "real" | "bool" | "enum" | "bit" | "hex" | "str"
		public Alternatives getTypeAlternatives_0() { return cTypeAlternatives_0; }

		//"int"
		public Keyword getTypeIntKeyword_0_0() { return cTypeIntKeyword_0_0; }

		//"real"
		public Keyword getTypeRealKeyword_0_1() { return cTypeRealKeyword_0_1; }

		//"bool"
		public Keyword getTypeBoolKeyword_0_2() { return cTypeBoolKeyword_0_2; }

		//"enum"
		public Keyword getTypeEnumKeyword_0_3() { return cTypeEnumKeyword_0_3; }

		//"bit"
		public Keyword getTypeBitKeyword_0_4() { return cTypeBitKeyword_0_4; }

		//"hex"
		public Keyword getTypeHexKeyword_0_5() { return cTypeHexKeyword_0_5; }

		//"str"
		public Keyword getTypeStrKeyword_0_6() { return cTypeStrKeyword_0_6; }
	}

	public class RANGEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RANGE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTERVALParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLSETParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RANGE:
		//
		//	INTERVAL | LSET;
		public ParserRule getRule() { return rule; }

		//INTERVAL | LSET
		public Alternatives getAlternatives() { return cAlternatives; }

		//INTERVAL
		public RuleCall getINTERVALParserRuleCall_0() { return cINTERVALParserRuleCall_0; }

		//LSET
		public RuleCall getLSETParserRuleCall_1() { return cLSETParserRuleCall_1; }
	}

	public class INTERVALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "INTERVAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLsqbrAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cLsqbrAlternatives_0_0 = (Alternatives)cLsqbrAssignment_0.eContents().get(0);
		private final Keyword cLsqbrRightSquareBracketKeyword_0_0_0 = (Keyword)cLsqbrAlternatives_0_0.eContents().get(0);
		private final Keyword cLsqbrLeftSquareBracketKeyword_0_0_1 = (Keyword)cLsqbrAlternatives_0_0.eContents().get(1);
		private final Assignment cMinAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMinLiteralParserRuleCall_1_0 = (RuleCall)cMinAssignment_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMaxAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMaxLiteralParserRuleCall_3_0 = (RuleCall)cMaxAssignment_3.eContents().get(0);
		private final Assignment cRsqbrAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cRsqbrAlternatives_4_0 = (Alternatives)cRsqbrAssignment_4.eContents().get(0);
		private final Keyword cRsqbrRightSquareBracketKeyword_4_0_0 = (Keyword)cRsqbrAlternatives_4_0.eContents().get(0);
		private final Keyword cRsqbrLeftSquareBracketKeyword_4_0_1 = (Keyword)cRsqbrAlternatives_4_0.eContents().get(1);
		
		//INTERVAL:
		//
		//	lsqbr=("]" | "[") min=Literal ".." max=Literal rsqbr=("]" | "[");
		public ParserRule getRule() { return rule; }

		//lsqbr=("]" | "[") min=Literal ".." max=Literal rsqbr=("]" | "[")
		public Group getGroup() { return cGroup; }

		//lsqbr=("]" | "[")
		public Assignment getLsqbrAssignment_0() { return cLsqbrAssignment_0; }

		//"]" | "["
		public Alternatives getLsqbrAlternatives_0_0() { return cLsqbrAlternatives_0_0; }

		//"]"
		public Keyword getLsqbrRightSquareBracketKeyword_0_0_0() { return cLsqbrRightSquareBracketKeyword_0_0_0; }

		//"["
		public Keyword getLsqbrLeftSquareBracketKeyword_0_0_1() { return cLsqbrLeftSquareBracketKeyword_0_0_1; }

		//min=Literal
		public Assignment getMinAssignment_1() { return cMinAssignment_1; }

		//Literal
		public RuleCall getMinLiteralParserRuleCall_1_0() { return cMinLiteralParserRuleCall_1_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_2() { return cFullStopFullStopKeyword_2; }

		//max=Literal
		public Assignment getMaxAssignment_3() { return cMaxAssignment_3; }

		//Literal
		public RuleCall getMaxLiteralParserRuleCall_3_0() { return cMaxLiteralParserRuleCall_3_0; }

		//rsqbr=("]" | "[")
		public Assignment getRsqbrAssignment_4() { return cRsqbrAssignment_4; }

		//"]" | "["
		public Alternatives getRsqbrAlternatives_4_0() { return cRsqbrAlternatives_4_0; }

		//"]"
		public Keyword getRsqbrRightSquareBracketKeyword_4_0_0() { return cRsqbrRightSquareBracketKeyword_4_0_0; }

		//"["
		public Keyword getRsqbrLeftSquareBracketKeyword_4_0_1() { return cRsqbrLeftSquareBracketKeyword_4_0_1; }
	}

	public class LSETElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LSET");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cLSETAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueLiteralParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueLiteralParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LSET:
		//
		//	"{" {LSET} value+=Literal ("," value+=Literal)* "}";
		public ParserRule getRule() { return rule; }

		//"{" {LSET} value+=Literal ("," value+=Literal)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//{LSET}
		public Action getLSETAction_1() { return cLSETAction_1; }

		//value+=Literal
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Literal
		public RuleCall getValueLiteralParserRuleCall_2_0() { return cValueLiteralParserRuleCall_2_0; }

		//("," value+=Literal)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//value+=Literal
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//Literal
		public RuleCall getValueLiteralParserRuleCall_3_1_0() { return cValueLiteralParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntLITERALAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTEGERParserRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cRealLITERALAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueDECIMALParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBoolLITERALAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueBOOLEANTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cStrLITERALAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cEnumLITERALAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueENUM_ELEMENTTerminalRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cBitLITERALAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValueBITTerminalRuleCall_5_1_0 = (RuleCall)cValueAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cHexLITERALAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cValueAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cValueHEXTerminalRuleCall_6_1_0 = (RuleCall)cValueAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cUnknowLITERALAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Assignment cValueAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final Keyword cValueQuestionMarkKeyword_7_1_0 = (Keyword)cValueAssignment_7_1.eContents().get(0);
		
		//Literal:
		//
		//	{intLITERAL} value=INTEGER | {realLITERAL} value=DECIMAL | {boolLITERAL} value=BOOLEAN | {strLITERAL} value=STRING |
		//
		//	{enumLITERAL} value=ENUM_ELEMENT | {bitLITERAL} value=BIT | {hexLITERAL} value=HEX | {unknowLITERAL} value="?";
		public ParserRule getRule() { return rule; }

		//{intLITERAL} value=INTEGER | {realLITERAL} value=DECIMAL | {boolLITERAL} value=BOOLEAN | {strLITERAL} value=STRING |
		//
		//{enumLITERAL} value=ENUM_ELEMENT | {bitLITERAL} value=BIT | {hexLITERAL} value=HEX | {unknowLITERAL} value="?"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{intLITERAL} value=INTEGER
		public Group getGroup_0() { return cGroup_0; }

		//{intLITERAL}
		public Action getIntLITERALAction_0_0() { return cIntLITERALAction_0_0; }

		//value=INTEGER
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//INTEGER
		public RuleCall getValueINTEGERParserRuleCall_0_1_0() { return cValueINTEGERParserRuleCall_0_1_0; }

		//{realLITERAL} value=DECIMAL
		public Group getGroup_1() { return cGroup_1; }

		//{realLITERAL}
		public Action getRealLITERALAction_1_0() { return cRealLITERALAction_1_0; }

		//value=DECIMAL
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//DECIMAL
		public RuleCall getValueDECIMALParserRuleCall_1_1_0() { return cValueDECIMALParserRuleCall_1_1_0; }

		//{boolLITERAL} value=BOOLEAN
		public Group getGroup_2() { return cGroup_2; }

		//{boolLITERAL}
		public Action getBoolLITERALAction_2_0() { return cBoolLITERALAction_2_0; }

		//value=BOOLEAN
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//BOOLEAN
		public RuleCall getValueBOOLEANTerminalRuleCall_2_1_0() { return cValueBOOLEANTerminalRuleCall_2_1_0; }

		//{strLITERAL} value=STRING
		public Group getGroup_3() { return cGroup_3; }

		//{strLITERAL}
		public Action getStrLITERALAction_3_0() { return cStrLITERALAction_3_0; }

		//value=STRING
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_1_0() { return cValueSTRINGTerminalRuleCall_3_1_0; }

		//{enumLITERAL} value=ENUM_ELEMENT
		public Group getGroup_4() { return cGroup_4; }

		//{enumLITERAL}
		public Action getEnumLITERALAction_4_0() { return cEnumLITERALAction_4_0; }

		//value=ENUM_ELEMENT
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }

		//ENUM_ELEMENT
		public RuleCall getValueENUM_ELEMENTTerminalRuleCall_4_1_0() { return cValueENUM_ELEMENTTerminalRuleCall_4_1_0; }

		//{bitLITERAL} value=BIT
		public Group getGroup_5() { return cGroup_5; }

		//{bitLITERAL}
		public Action getBitLITERALAction_5_0() { return cBitLITERALAction_5_0; }

		//value=BIT
		public Assignment getValueAssignment_5_1() { return cValueAssignment_5_1; }

		//BIT
		public RuleCall getValueBITTerminalRuleCall_5_1_0() { return cValueBITTerminalRuleCall_5_1_0; }

		//{hexLITERAL} value=HEX
		public Group getGroup_6() { return cGroup_6; }

		//{hexLITERAL}
		public Action getHexLITERALAction_6_0() { return cHexLITERALAction_6_0; }

		//value=HEX
		public Assignment getValueAssignment_6_1() { return cValueAssignment_6_1; }

		//HEX
		public RuleCall getValueHEXTerminalRuleCall_6_1_0() { return cValueHEXTerminalRuleCall_6_1_0; }

		//{unknowLITERAL} value="?"
		public Group getGroup_7() { return cGroup_7; }

		//{unknowLITERAL}
		public Action getUnknowLITERALAction_7_0() { return cUnknowLITERALAction_7_0; }

		//value="?"
		public Assignment getValueAssignment_7_1() { return cValueAssignment_7_1; }

		//"?"
		public Keyword getValueQuestionMarkKeyword_7_1_0() { return cValueQuestionMarkKeyword_7_1_0; }
	}

	public class STATEMENTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "STATEMENT");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAbstractVAR_DECLParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIF_STATEMENTParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLOOP_STATEMENTParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cASSIGN_STATEMENTParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cERROR_STATEMENTParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		/// *
		//
		// * Instructions declaration
		//
		// * / STATEMENT:
		//
		//	AbstractVAR_DECL | IF_STATEMENT | LOOP_STATEMENT | ASSIGN_STATEMENT | ERROR_STATEMENT;
		public ParserRule getRule() { return rule; }

		//AbstractVAR_DECL | IF_STATEMENT | LOOP_STATEMENT | ASSIGN_STATEMENT | ERROR_STATEMENT
		public Alternatives getAlternatives() { return cAlternatives; }

		//AbstractVAR_DECL
		public RuleCall getAbstractVAR_DECLParserRuleCall_0() { return cAbstractVAR_DECLParserRuleCall_0; }

		//IF_STATEMENT
		public RuleCall getIF_STATEMENTParserRuleCall_1() { return cIF_STATEMENTParserRuleCall_1; }

		//LOOP_STATEMENT
		public RuleCall getLOOP_STATEMENTParserRuleCall_2() { return cLOOP_STATEMENTParserRuleCall_2; }

		//ASSIGN_STATEMENT
		public RuleCall getASSIGN_STATEMENTParserRuleCall_3() { return cASSIGN_STATEMENTParserRuleCall_3; }

		//ERROR_STATEMENT
		public RuleCall getERROR_STATEMENTParserRuleCall_4() { return cERROR_STATEMENTParserRuleCall_4; }
	}

	public class IF_STATEMENTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IF_STATEMENT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIfCondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIfCondEXPRESSIONParserRuleCall_2_0 = (RuleCall)cIfCondAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIfstAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIfstSTATEMENTParserRuleCall_5_0 = (RuleCall)cIfstAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cElseKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cElstAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cElstSTATEMENTParserRuleCall_7_2_0 = (RuleCall)cElstAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		
		//IF_STATEMENT:
		//
		//	"if" "(" ifCond=EXPRESSION ")" "{" ifst+=STATEMENT* "}" ("else" "{" elst+=STATEMENT* "}");
		public ParserRule getRule() { return rule; }

		//"if" "(" ifCond=EXPRESSION ")" "{" ifst+=STATEMENT* "}" ("else" "{" elst+=STATEMENT* "}")
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ifCond=EXPRESSION
		public Assignment getIfCondAssignment_2() { return cIfCondAssignment_2; }

		//EXPRESSION
		public RuleCall getIfCondEXPRESSIONParserRuleCall_2_0() { return cIfCondEXPRESSIONParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//ifst+=STATEMENT*
		public Assignment getIfstAssignment_5() { return cIfstAssignment_5; }

		//STATEMENT
		public RuleCall getIfstSTATEMENTParserRuleCall_5_0() { return cIfstSTATEMENTParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//=> "else" "{" elst+=STATEMENT* "}"
		public Group getGroup_7() { return cGroup_7; }

		//=> "else"
		public Keyword getElseKeyword_7_0() { return cElseKeyword_7_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }

		//elst+=STATEMENT*
		public Assignment getElstAssignment_7_2() { return cElstAssignment_7_2; }

		//STATEMENT
		public RuleCall getElstSTATEMENTParserRuleCall_7_2_0() { return cElstSTATEMENTParserRuleCall_7_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }
	}

	public class LOOP_STATEMENTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LOOP_STATEMENT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLoopCondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLoopCondEXPRESSIONParserRuleCall_2_0 = (RuleCall)cLoopCondAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LOOP_STATEMENT:
		//
		//	"loop" "(" loopCond=EXPRESSION ")";
		public ParserRule getRule() { return rule; }

		//"loop" "(" loopCond=EXPRESSION ")"
		public Group getGroup() { return cGroup; }

		//"loop"
		public Keyword getLoopKeyword_0() { return cLoopKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//loopCond=EXPRESSION
		public Assignment getLoopCondAssignment_2() { return cLoopCondAssignment_2; }

		//EXPRESSION
		public RuleCall getLoopCondEXPRESSIONParserRuleCall_2_0() { return cLoopCondEXPRESSIONParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ERROR_STATEMENTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ERROR_STATEMENT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cErrorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cERROR_STATEMENTAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ERROR_STATEMENT:
		//
		//	"error" {ERROR_STATEMENT} ";"?;
		public ParserRule getRule() { return rule; }

		//"error" {ERROR_STATEMENT} ";"?
		public Group getGroup() { return cGroup; }

		//"error"
		public Keyword getErrorKeyword_0() { return cErrorKeyword_0; }

		//{ERROR_STATEMENT}
		public Action getERROR_STATEMENTAction_1() { return cERROR_STATEMENTAction_1; }

		//";"?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ASSIGN_STATEMENTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ASSIGN_STATEMENT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftVAR_REFParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightEXPRESSIONParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ASSIGN_STATEMENT:
		//
		//	left=VAR_REF "=" right=EXPRESSION ";"?;
		public ParserRule getRule() { return rule; }

		//left=VAR_REF "=" right=EXPRESSION ";"?
		public Group getGroup() { return cGroup; }

		//left=VAR_REF
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//VAR_REF
		public RuleCall getLeftVAR_REFParserRuleCall_0_0() { return cLeftVAR_REFParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//right=EXPRESSION
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//EXPRESSION
		public RuleCall getRightEXPRESSIONParserRuleCall_2_0() { return cRightEXPRESSIONParserRuleCall_2_0; }

		//";"?
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class VAR_REFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VAR_REF");
		private final Assignment cVariableAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVariableAbstractVAR_DECLCrossReference_0 = (CrossReference)cVariableAssignment.eContents().get(0);
		private final RuleCall cVariableAbstractVAR_DECLIDENTTerminalRuleCall_0_1 = (RuleCall)cVariableAbstractVAR_DECLCrossReference_0.eContents().get(1);
		
		//VAR_REF:
		//
		//	variable=[AbstractVAR_DECL|IDENT];
		public ParserRule getRule() { return rule; }

		//variable=[AbstractVAR_DECL|IDENT]
		public Assignment getVariableAssignment() { return cVariableAssignment; }

		//[AbstractVAR_DECL|IDENT]
		public CrossReference getVariableAbstractVAR_DECLCrossReference_0() { return cVariableAbstractVAR_DECLCrossReference_0; }

		//IDENT
		public RuleCall getVariableAbstractVAR_DECLIDENTTerminalRuleCall_0_1() { return cVariableAbstractVAR_DECLIDENTTerminalRuleCall_0_1; }
	}

	public class EXPRESSIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EXPRESSION");
		private final RuleCall cORParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// *
		//
		// * Expression grammar 
		//
		// * / EXPRESSION:
		//
		//	OR;
		public ParserRule getRule() { return rule; }

		//OR
		public RuleCall getORParserRuleCall() { return cORParserRuleCall; }
	}

	public class ORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cANDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cORLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightANDParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OR returns EXPRESSION:
		//
		//	AND ({OR.left=current} "or" right=AND)*;
		public ParserRule getRule() { return rule; }

		//AND ({OR.left=current} "or" right=AND)*
		public Group getGroup() { return cGroup; }

		//AND
		public RuleCall getANDParserRuleCall_0() { return cANDParserRuleCall_0; }

		//({OR.left=current} "or" right=AND)*
		public Group getGroup_1() { return cGroup_1; }

		//{OR.left=current}
		public Action getORLeftAction_1_0() { return cORLeftAction_1_0; }

		//"or"
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }

		//right=AND
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AND
		public RuleCall getRightANDParserRuleCall_1_2_0() { return cRightANDParserRuleCall_1_2_0; }
	}

	public class ANDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AND");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEQUAL_DIFFParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cANDLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEQUAL_DIFFParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AND returns EXPRESSION:
		//
		//	EQUAL_DIFF ({AND.left=current} "and" right=EQUAL_DIFF)*;
		public ParserRule getRule() { return rule; }

		//EQUAL_DIFF ({AND.left=current} "and" right=EQUAL_DIFF)*
		public Group getGroup() { return cGroup; }

		//EQUAL_DIFF
		public RuleCall getEQUAL_DIFFParserRuleCall_0() { return cEQUAL_DIFFParserRuleCall_0; }

		//({AND.left=current} "and" right=EQUAL_DIFF)*
		public Group getGroup_1() { return cGroup_1; }

		//{AND.left=current}
		public Action getANDLeftAction_1_0() { return cANDLeftAction_1_0; }

		//"and"
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }

		//right=EQUAL_DIFF
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//EQUAL_DIFF
		public RuleCall getRightEQUAL_DIFFParserRuleCall_1_2_0() { return cRightEQUAL_DIFFParserRuleCall_1_2_0; }
	}

	public class EQUAL_DIFFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EQUAL_DIFF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCOMPARISONParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEQUAL_DIFFLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightCOMPARISONParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//EQUAL_DIFF returns EXPRESSION:
		//
		//	COMPARISON ({EQUAL_DIFF.left=current} op=("==" | "!=") right=COMPARISON)*;
		public ParserRule getRule() { return rule; }

		//COMPARISON ({EQUAL_DIFF.left=current} op=("==" | "!=") right=COMPARISON)*
		public Group getGroup() { return cGroup; }

		//COMPARISON
		public RuleCall getCOMPARISONParserRuleCall_0() { return cCOMPARISONParserRuleCall_0; }

		//({EQUAL_DIFF.left=current} op=("==" | "!=") right=COMPARISON)*
		public Group getGroup_1() { return cGroup_1; }

		//{EQUAL_DIFF.left=current}
		public Action getEQUAL_DIFFLeftAction_1_0() { return cEQUAL_DIFFLeftAction_1_0; }

		//op=("==" | "!=")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"==" | "!="
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_1_0_0; }

		//"!="
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_1; }

		//right=COMPARISON
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//COMPARISON
		public RuleCall getRightCOMPARISONParserRuleCall_1_2_0() { return cRightCOMPARISONParserRuleCall_1_2_0; }
	}

	public class COMPARISONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "COMPARISON");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cADD_SUBParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cCOMPARISONLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpLessThanSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightADD_SUBParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//COMPARISON returns EXPRESSION:
		//
		//	ADD_SUB ({COMPARISON.left=current} op=("<" | "<=" | ">" | ">=") right=ADD_SUB)*;
		public ParserRule getRule() { return rule; }

		//ADD_SUB ({COMPARISON.left=current} op=("<" | "<=" | ">" | ">=") right=ADD_SUB)*
		public Group getGroup() { return cGroup; }

		//ADD_SUB
		public RuleCall getADD_SUBParserRuleCall_0() { return cADD_SUBParserRuleCall_0; }

		//({COMPARISON.left=current} op=("<" | "<=" | ">" | ">=") right=ADD_SUB)*
		public Group getGroup_1() { return cGroup_1; }

		//{COMPARISON.left=current}
		public Action getCOMPARISONLeftAction_1_0() { return cCOMPARISONLeftAction_1_0; }

		//op=("<" | "<=" | ">" | ">=")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"<" | "<=" | ">" | ">="
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"<"
		public Keyword getOpLessThanSignKeyword_1_1_0_0() { return cOpLessThanSignKeyword_1_1_0_0; }

		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_1_0_1; }

		//">"
		public Keyword getOpGreaterThanSignKeyword_1_1_0_2() { return cOpGreaterThanSignKeyword_1_1_0_2; }

		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_3() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_3; }

		//right=ADD_SUB
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ADD_SUB
		public RuleCall getRightADD_SUBParserRuleCall_1_2_0() { return cRightADD_SUBParserRuleCall_1_2_0; }
	}

	public class ADD_SUBElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ADD_SUB");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMULT_DIVParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cADDLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cSUBLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMULT_DIVParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//ADD_SUB returns EXPRESSION:
		//
		//	MULT_DIV (({ADD.left=current} "+" | {SUB.left=current} "-") right=MULT_DIV)*;
		public ParserRule getRule() { return rule; }

		//MULT_DIV (({ADD.left=current} "+" | {SUB.left=current} "-") right=MULT_DIV)*
		public Group getGroup() { return cGroup; }

		//MULT_DIV
		public RuleCall getMULT_DIVParserRuleCall_0() { return cMULT_DIVParserRuleCall_0; }

		//(({ADD.left=current} "+" | {SUB.left=current} "-") right=MULT_DIV)*
		public Group getGroup_1() { return cGroup_1; }

		//{ADD.left=current} "+" | {SUB.left=current} "-"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{ADD.left=current} "+"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{ADD.left=current}
		public Action getADDLeftAction_1_0_0_0() { return cADDLeftAction_1_0_0_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }

		//{SUB.left=current} "-"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{SUB.left=current}
		public Action getSUBLeftAction_1_0_1_0() { return cSUBLeftAction_1_0_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }

		//right=MULT_DIV
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//MULT_DIV
		public RuleCall getRightMULT_DIVParserRuleCall_1_1_0() { return cRightMULT_DIVParserRuleCall_1_1_0; }
	}

	public class MULT_DIVElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MULT_DIV");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMULTLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDIVLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimaryExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//MULT_DIV returns EXPRESSION:
		//
		//	PrimaryExpression (({MULT.left=current} "*" | {DIV.left=current} "/") right=PrimaryExpression)*;
		public ParserRule getRule() { return rule; }

		//PrimaryExpression (({MULT.left=current} "*" | {DIV.left=current} "/") right=PrimaryExpression)*
		public Group getGroup() { return cGroup; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }

		//(({MULT.left=current} "*" | {DIV.left=current} "/") right=PrimaryExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{MULT.left=current} "*" | {DIV.left=current} "/"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{MULT.left=current} "*"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{MULT.left=current}
		public Action getMULTLeftAction_1_0_0_0() { return cMULTLeftAction_1_0_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }

		//{DIV.left=current} "/"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{DIV.left=current}
		public Action getDIVLeftAction_1_0_1_0() { return cDIVLeftAction_1_0_1_0; }

		//"/"
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }

		//right=PrimaryExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//PrimaryExpression
		public RuleCall getRightPrimaryExpressionParserRuleCall_1_1_0() { return cRightPrimaryExpressionParserRuleCall_1_1_0; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cEXPRESSIONParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNOTAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cNotKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpPrimaryExpressionParserRuleCall_1_2_0 = (RuleCall)cExpAssignment_1_2.eContents().get(0);
		private final RuleCall cAtomicParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//PrimaryExpression returns EXPRESSION:
		//
		//	"(" EXPRESSION ")" | {NOT} "not" exp=PrimaryExpression | Atomic;
		public ParserRule getRule() { return rule; }

		//"(" EXPRESSION ")" | {NOT} "not" exp=PrimaryExpression | Atomic
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" EXPRESSION ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//EXPRESSION
		public RuleCall getEXPRESSIONParserRuleCall_0_1() { return cEXPRESSIONParserRuleCall_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//{NOT} "not" exp=PrimaryExpression
		public Group getGroup_1() { return cGroup_1; }

		//{NOT}
		public Action getNOTAction_1_0() { return cNOTAction_1_0; }

		//"not"
		public Keyword getNotKeyword_1_1() { return cNotKeyword_1_1; }

		//exp=PrimaryExpression
		public Assignment getExpAssignment_1_2() { return cExpAssignment_1_2; }

		//PrimaryExpression
		public RuleCall getExpPrimaryExpressionParserRuleCall_1_2_0() { return cExpPrimaryExpressionParserRuleCall_1_2_0; }

		//Atomic
		public RuleCall getAtomicParserRuleCall_2() { return cAtomicParserRuleCall_2; }
	}

	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTEGERParserRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cRealConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueDECIMALParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cStrConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cEnumConstantAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueENUM_ELEMENTTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cBoolConstantAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueBOOLEANTerminalRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cBitConstantAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValueBITTerminalRuleCall_5_1_0 = (RuleCall)cValueAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cHexConstantAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cValueAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cValueHEXTerminalRuleCall_6_1_0 = (RuleCall)cValueAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cVarExpRefAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Assignment cVrefAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cVrefAbstractVAR_DECLCrossReference_7_1_0 = (CrossReference)cVrefAssignment_7_1.eContents().get(0);
		private final RuleCall cVrefAbstractVAR_DECLIDENTTerminalRuleCall_7_1_0_1 = (RuleCall)cVrefAbstractVAR_DECLCrossReference_7_1_0.eContents().get(1);
		
		//Atomic returns EXPRESSION:
		//
		//	{intConstant} value=INTEGER | {realConstant} value=DECIMAL | {strConstant} value=STRING | {enumConstant}
		//
		//	value=ENUM_ELEMENT | {boolConstant} value=BOOLEAN | {bitConstant} value=BIT | {hexConstant} value=HEX | {VarExpRef}
		//
		//	vref=[AbstractVAR_DECL|IDENT];
		public ParserRule getRule() { return rule; }

		//{intConstant} value=INTEGER | {realConstant} value=DECIMAL | {strConstant} value=STRING | {enumConstant}
		//
		//value=ENUM_ELEMENT | {boolConstant} value=BOOLEAN | {bitConstant} value=BIT | {hexConstant} value=HEX | {VarExpRef}
		//
		//vref=[AbstractVAR_DECL|IDENT]
		public Alternatives getAlternatives() { return cAlternatives; }

		//{intConstant} value=INTEGER
		public Group getGroup_0() { return cGroup_0; }

		//{intConstant}
		public Action getIntConstantAction_0_0() { return cIntConstantAction_0_0; }

		//value=INTEGER
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//INTEGER
		public RuleCall getValueINTEGERParserRuleCall_0_1_0() { return cValueINTEGERParserRuleCall_0_1_0; }

		//{realConstant} value=DECIMAL
		public Group getGroup_1() { return cGroup_1; }

		//{realConstant}
		public Action getRealConstantAction_1_0() { return cRealConstantAction_1_0; }

		//value=DECIMAL
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//DECIMAL
		public RuleCall getValueDECIMALParserRuleCall_1_1_0() { return cValueDECIMALParserRuleCall_1_1_0; }

		//{strConstant} value=STRING
		public Group getGroup_2() { return cGroup_2; }

		//{strConstant}
		public Action getStrConstantAction_2_0() { return cStrConstantAction_2_0; }

		//value=STRING
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_1_0() { return cValueSTRINGTerminalRuleCall_2_1_0; }

		//{enumConstant} value=ENUM_ELEMENT
		public Group getGroup_3() { return cGroup_3; }

		//{enumConstant}
		public Action getEnumConstantAction_3_0() { return cEnumConstantAction_3_0; }

		//value=ENUM_ELEMENT
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//ENUM_ELEMENT
		public RuleCall getValueENUM_ELEMENTTerminalRuleCall_3_1_0() { return cValueENUM_ELEMENTTerminalRuleCall_3_1_0; }

		//{boolConstant} value=BOOLEAN
		public Group getGroup_4() { return cGroup_4; }

		//{boolConstant}
		public Action getBoolConstantAction_4_0() { return cBoolConstantAction_4_0; }

		//value=BOOLEAN
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }

		//BOOLEAN
		public RuleCall getValueBOOLEANTerminalRuleCall_4_1_0() { return cValueBOOLEANTerminalRuleCall_4_1_0; }

		//{bitConstant} value=BIT
		public Group getGroup_5() { return cGroup_5; }

		//{bitConstant}
		public Action getBitConstantAction_5_0() { return cBitConstantAction_5_0; }

		//value=BIT
		public Assignment getValueAssignment_5_1() { return cValueAssignment_5_1; }

		//BIT
		public RuleCall getValueBITTerminalRuleCall_5_1_0() { return cValueBITTerminalRuleCall_5_1_0; }

		//{hexConstant} value=HEX
		public Group getGroup_6() { return cGroup_6; }

		//{hexConstant}
		public Action getHexConstantAction_6_0() { return cHexConstantAction_6_0; }

		//value=HEX
		public Assignment getValueAssignment_6_1() { return cValueAssignment_6_1; }

		//HEX
		public RuleCall getValueHEXTerminalRuleCall_6_1_0() { return cValueHEXTerminalRuleCall_6_1_0; }

		//{VarExpRef} vref=[AbstractVAR_DECL|IDENT]
		public Group getGroup_7() { return cGroup_7; }

		//{VarExpRef}
		public Action getVarExpRefAction_7_0() { return cVarExpRefAction_7_0; }

		//vref=[AbstractVAR_DECL|IDENT]
		public Assignment getVrefAssignment_7_1() { return cVrefAssignment_7_1; }

		//[AbstractVAR_DECL|IDENT]
		public CrossReference getVrefAbstractVAR_DECLCrossReference_7_1_0() { return cVrefAbstractVAR_DECLCrossReference_7_1_0; }

		//IDENT
		public RuleCall getVrefAbstractVAR_DECLIDENTTerminalRuleCall_7_1_0_1() { return cVrefAbstractVAR_DECLIDENTTerminalRuleCall_7_1_0_1; }
	}

	public class DECIMALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DECIMAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//DECIMAL returns ecore::EDouble:
		//
		//	"-"? INT ("." INT);
		public ParserRule getRule() { return rule; }

		//"-"? INT ("." INT)
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//"." INT
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}

	public class INTEGERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "INTEGER");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//INTEGER returns ecore::EInt:
		//
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	private LANGUAGEElements pLANGUAGE;
	private MODULE_DECLElements pMODULE_DECL;
	private STRATEGYElements pSTRATEGY;
	private INTERFACEElements pINTERFACE;
	private BODYElements pBODY;
	private CRITERION_DECLElements pCRITERION_DECL;
	private DATASEL_DECLElements pDATASEL_DECL;
	private CRITERIONElements pCRITERION;
	private DATASELElements pDATASEL;
	private AbstractVAR_DECLElements pAbstractVAR_DECL;
	private VAR_DECLElements pVAR_DECL;
	private FlowElements pFlow;
	private CST_DECLElements pCST_DECL;
	private TmpVAR_DECLElements pTmpVAR_DECL;
	private TYPEElements pTYPE;
	private RANGEElements pRANGE;
	private INTERVALElements pINTERVAL;
	private LSETElements pLSET;
	private LiteralElements pLiteral;
	private STATEMENTElements pSTATEMENT;
	private IF_STATEMENTElements pIF_STATEMENT;
	private LOOP_STATEMENTElements pLOOP_STATEMENT;
	private ERROR_STATEMENTElements pERROR_STATEMENT;
	private ASSIGN_STATEMENTElements pASSIGN_STATEMENT;
	private VAR_REFElements pVAR_REF;
	private EXPRESSIONElements pEXPRESSION;
	private ORElements pOR;
	private ANDElements pAND;
	private EQUAL_DIFFElements pEQUAL_DIFF;
	private COMPARISONElements pCOMPARISON;
	private ADD_SUBElements pADD_SUB;
	private MULT_DIVElements pMULT_DIV;
	private PrimaryExpressionElements pPrimaryExpression;
	private AtomicElements pAtomic;
	private DECIMALElements pDECIMAL;
	private INTEGERElements pINTEGER;
	private TerminalRule tENUM_ELEMENT;
	private TerminalRule tBOOLEAN;
	private TerminalRule tHEX;
	private TerminalRule tIDENT;
	private TerminalRule tBIT;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ModuleDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.ModuleDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//LANGUAGE:
	//
	//	modules+=MODULE_DECL+;
	public LANGUAGEElements getLANGUAGEAccess() {
		return (pLANGUAGE != null) ? pLANGUAGE : (pLANGUAGE = new LANGUAGEElements());
	}
	
	public ParserRule getLANGUAGERule() {
		return getLANGUAGEAccess().getRule();
	}

	/// *
	//
	// * Constraints: Module name must be unique, 
	//
	// * If two "datasel" criteria are chosen, they must be distinct
	//
	// * / MODULE_DECL:
	//
	//	"module" {MODULE_DECL} name=IDENT "{" strategy=STRATEGY interface=INTERFACE body=BODY "}";
	public MODULE_DECLElements getMODULE_DECLAccess() {
		return (pMODULE_DECL != null) ? pMODULE_DECL : (pMODULE_DECL = new MODULE_DECLElements());
	}
	
	public ParserRule getMODULE_DECLRule() {
		return getMODULE_DECLAccess().getRule();
	}

	//STRATEGY:
	//
	//	"@" "strategy" {STRATEGY} "{" critdecl=CRITERION_DECL dataseldecl=DATASEL_DECL "}";
	public STRATEGYElements getSTRATEGYAccess() {
		return (pSTRATEGY != null) ? pSTRATEGY : (pSTRATEGY = new STRATEGYElements());
	}
	
	public ParserRule getSTRATEGYRule() {
		return getSTRATEGYAccess().getRule();
	}

	//INTERFACE:
	//
	//	"@" "interface" {INTERFACE} "{" declaration+=AbstractVAR_DECL+ "}";
	public INTERFACEElements getINTERFACEAccess() {
		return (pINTERFACE != null) ? pINTERFACE : (pINTERFACE = new INTERFACEElements());
	}
	
	public ParserRule getINTERFACERule() {
		return getINTERFACEAccess().getRule();
	}

	//BODY:
	//
	//	"@" "body" {BODY} "{" statements+=STATEMENT* "}";
	public BODYElements getBODYAccess() {
		return (pBODY != null) ? pBODY : (pBODY = new BODYElements());
	}
	
	public ParserRule getBODYRule() {
		return getBODYAccess().getRule();
	}

	//CRITERION_DECL:
	//
	//	"crit" ":" {CRITERION_DECL} crit=CRITERION ";"?;
	public CRITERION_DECLElements getCRITERION_DECLAccess() {
		return (pCRITERION_DECL != null) ? pCRITERION_DECL : (pCRITERION_DECL = new CRITERION_DECLElements());
	}
	
	public ParserRule getCRITERION_DECLRule() {
		return getCRITERION_DECLAccess().getRule();
	}

	//DATASEL_DECL:
	//
	//	"datasel" ":" {DATASEL_DECL} data1=DATASEL ("," data2=DATASEL)? ";"?;
	public DATASEL_DECLElements getDATASEL_DECLAccess() {
		return (pDATASEL_DECL != null) ? pDATASEL_DECL : (pDATASEL_DECL = new DATASEL_DECLElements());
	}
	
	public ParserRule getDATASEL_DECLRule() {
		return getDATASEL_DECLAccess().getRule();
	}

	/// * 
	//
	// * Strategies to be used
	//
	// * / CRITERION:
	//
	//	crit=("mcdc" | "dc" | "cc");
	public CRITERIONElements getCRITERIONAccess() {
		return (pCRITERION != null) ? pCRITERION : (pCRITERION = new CRITERIONElements());
	}
	
	public ParserRule getCRITERIONRule() {
		return getCRITERIONAccess().getRule();
	}

	/// *
	//
	// * Data selection policy
	//
	// * / DATASEL:
	//
	//	sel=("rand" | "eqv" | "bv");
	public DATASELElements getDATASELAccess() {
		return (pDATASEL != null) ? pDATASEL : (pDATASEL = new DATASELElements());
	}
	
	public ParserRule getDATASELRule() {
		return getDATASELAccess().getRule();
	}

	/// *
	//
	// * variables macros and instructions declaration
	//
	// * / / **
	//
	// * Variables declaration
	//
	// * Constraints: bool variable has no range
	//
	// * enum variable must enable a set of values
	//
	// * enum and string variables supports Set Range only
	//
	// * / AbstractVAR_DECL:
	//
	//	VAR_DECL | TmpVAR_DECL | CST_DECL;
	public AbstractVAR_DECLElements getAbstractVAR_DECLAccess() {
		return (pAbstractVAR_DECL != null) ? pAbstractVAR_DECL : (pAbstractVAR_DECL = new AbstractVAR_DECLElements());
	}
	
	public ParserRule getAbstractVAR_DECLRule() {
		return getAbstractVAR_DECLAccess().getRule();
	}

	//VAR_DECL:
	//
	//	{VAR_DECL} flow=Flow name=IDENT ":" type=TYPE range=RANGE? ";"?;
	public VAR_DECLElements getVAR_DECLAccess() {
		return (pVAR_DECL != null) ? pVAR_DECL : (pVAR_DECL = new VAR_DECLElements());
	}
	
	public ParserRule getVAR_DECLRule() {
		return getVAR_DECLAccess().getRule();
	}

	//Flow:
	//
	//	flow=("in" | "out" | "inout");
	public FlowElements getFlowAccess() {
		return (pFlow != null) ? pFlow : (pFlow = new FlowElements());
	}
	
	public ParserRule getFlowRule() {
		return getFlowAccess().getRule();
	}

	/// *
	//
	// * Constant Values declaration
	//
	// * / CST_DECL:
	//
	//	{CST_DECL} flow="const" type=TYPE name=IDENT "==" value=Literal ";"?;
	public CST_DECLElements getCST_DECLAccess() {
		return (pCST_DECL != null) ? pCST_DECL : (pCST_DECL = new CST_DECLElements());
	}
	
	public ParserRule getCST_DECLRule() {
		return getCST_DECLAccess().getRule();
	}

	//TmpVAR_DECL:
	//
	//	{TmpVAR_DECL} type=TYPE name=IDENT "init" value=EXPRESSION ";"?;
	public TmpVAR_DECLElements getTmpVAR_DECLAccess() {
		return (pTmpVAR_DECL != null) ? pTmpVAR_DECL : (pTmpVAR_DECL = new TmpVAR_DECLElements());
	}
	
	public ParserRule getTmpVAR_DECLRule() {
		return getTmpVAR_DECLAccess().getRule();
	}

	//TYPE:
	//
	//	type=("int" | "real" | "bool" | "enum" | "bit" | "hex" | "str");
	public TYPEElements getTYPEAccess() {
		return (pTYPE != null) ? pTYPE : (pTYPE = new TYPEElements());
	}
	
	public ParserRule getTYPERule() {
		return getTYPEAccess().getRule();
	}

	//RANGE:
	//
	//	INTERVAL | LSET;
	public RANGEElements getRANGEAccess() {
		return (pRANGE != null) ? pRANGE : (pRANGE = new RANGEElements());
	}
	
	public ParserRule getRANGERule() {
		return getRANGEAccess().getRule();
	}

	//INTERVAL:
	//
	//	lsqbr=("]" | "[") min=Literal ".." max=Literal rsqbr=("]" | "[");
	public INTERVALElements getINTERVALAccess() {
		return (pINTERVAL != null) ? pINTERVAL : (pINTERVAL = new INTERVALElements());
	}
	
	public ParserRule getINTERVALRule() {
		return getINTERVALAccess().getRule();
	}

	//LSET:
	//
	//	"{" {LSET} value+=Literal ("," value+=Literal)* "}";
	public LSETElements getLSETAccess() {
		return (pLSET != null) ? pLSET : (pLSET = new LSETElements());
	}
	
	public ParserRule getLSETRule() {
		return getLSETAccess().getRule();
	}

	//Literal:
	//
	//	{intLITERAL} value=INTEGER | {realLITERAL} value=DECIMAL | {boolLITERAL} value=BOOLEAN | {strLITERAL} value=STRING |
	//
	//	{enumLITERAL} value=ENUM_ELEMENT | {bitLITERAL} value=BIT | {hexLITERAL} value=HEX | {unknowLITERAL} value="?";
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	/// *
	//
	// * Instructions declaration
	//
	// * / STATEMENT:
	//
	//	AbstractVAR_DECL | IF_STATEMENT | LOOP_STATEMENT | ASSIGN_STATEMENT | ERROR_STATEMENT;
	public STATEMENTElements getSTATEMENTAccess() {
		return (pSTATEMENT != null) ? pSTATEMENT : (pSTATEMENT = new STATEMENTElements());
	}
	
	public ParserRule getSTATEMENTRule() {
		return getSTATEMENTAccess().getRule();
	}

	//IF_STATEMENT:
	//
	//	"if" "(" ifCond=EXPRESSION ")" "{" ifst+=STATEMENT* "}" ("else" "{" elst+=STATEMENT* "}");
	public IF_STATEMENTElements getIF_STATEMENTAccess() {
		return (pIF_STATEMENT != null) ? pIF_STATEMENT : (pIF_STATEMENT = new IF_STATEMENTElements());
	}
	
	public ParserRule getIF_STATEMENTRule() {
		return getIF_STATEMENTAccess().getRule();
	}

	//LOOP_STATEMENT:
	//
	//	"loop" "(" loopCond=EXPRESSION ")";
	public LOOP_STATEMENTElements getLOOP_STATEMENTAccess() {
		return (pLOOP_STATEMENT != null) ? pLOOP_STATEMENT : (pLOOP_STATEMENT = new LOOP_STATEMENTElements());
	}
	
	public ParserRule getLOOP_STATEMENTRule() {
		return getLOOP_STATEMENTAccess().getRule();
	}

	//ERROR_STATEMENT:
	//
	//	"error" {ERROR_STATEMENT} ";"?;
	public ERROR_STATEMENTElements getERROR_STATEMENTAccess() {
		return (pERROR_STATEMENT != null) ? pERROR_STATEMENT : (pERROR_STATEMENT = new ERROR_STATEMENTElements());
	}
	
	public ParserRule getERROR_STATEMENTRule() {
		return getERROR_STATEMENTAccess().getRule();
	}

	//ASSIGN_STATEMENT:
	//
	//	left=VAR_REF "=" right=EXPRESSION ";"?;
	public ASSIGN_STATEMENTElements getASSIGN_STATEMENTAccess() {
		return (pASSIGN_STATEMENT != null) ? pASSIGN_STATEMENT : (pASSIGN_STATEMENT = new ASSIGN_STATEMENTElements());
	}
	
	public ParserRule getASSIGN_STATEMENTRule() {
		return getASSIGN_STATEMENTAccess().getRule();
	}

	//VAR_REF:
	//
	//	variable=[AbstractVAR_DECL|IDENT];
	public VAR_REFElements getVAR_REFAccess() {
		return (pVAR_REF != null) ? pVAR_REF : (pVAR_REF = new VAR_REFElements());
	}
	
	public ParserRule getVAR_REFRule() {
		return getVAR_REFAccess().getRule();
	}

	/// *
	//
	// * Expression grammar 
	//
	// * / EXPRESSION:
	//
	//	OR;
	public EXPRESSIONElements getEXPRESSIONAccess() {
		return (pEXPRESSION != null) ? pEXPRESSION : (pEXPRESSION = new EXPRESSIONElements());
	}
	
	public ParserRule getEXPRESSIONRule() {
		return getEXPRESSIONAccess().getRule();
	}

	//OR returns EXPRESSION:
	//
	//	AND ({OR.left=current} "or" right=AND)*;
	public ORElements getORAccess() {
		return (pOR != null) ? pOR : (pOR = new ORElements());
	}
	
	public ParserRule getORRule() {
		return getORAccess().getRule();
	}

	//AND returns EXPRESSION:
	//
	//	EQUAL_DIFF ({AND.left=current} "and" right=EQUAL_DIFF)*;
	public ANDElements getANDAccess() {
		return (pAND != null) ? pAND : (pAND = new ANDElements());
	}
	
	public ParserRule getANDRule() {
		return getANDAccess().getRule();
	}

	//EQUAL_DIFF returns EXPRESSION:
	//
	//	COMPARISON ({EQUAL_DIFF.left=current} op=("==" | "!=") right=COMPARISON)*;
	public EQUAL_DIFFElements getEQUAL_DIFFAccess() {
		return (pEQUAL_DIFF != null) ? pEQUAL_DIFF : (pEQUAL_DIFF = new EQUAL_DIFFElements());
	}
	
	public ParserRule getEQUAL_DIFFRule() {
		return getEQUAL_DIFFAccess().getRule();
	}

	//COMPARISON returns EXPRESSION:
	//
	//	ADD_SUB ({COMPARISON.left=current} op=("<" | "<=" | ">" | ">=") right=ADD_SUB)*;
	public COMPARISONElements getCOMPARISONAccess() {
		return (pCOMPARISON != null) ? pCOMPARISON : (pCOMPARISON = new COMPARISONElements());
	}
	
	public ParserRule getCOMPARISONRule() {
		return getCOMPARISONAccess().getRule();
	}

	//ADD_SUB returns EXPRESSION:
	//
	//	MULT_DIV (({ADD.left=current} "+" | {SUB.left=current} "-") right=MULT_DIV)*;
	public ADD_SUBElements getADD_SUBAccess() {
		return (pADD_SUB != null) ? pADD_SUB : (pADD_SUB = new ADD_SUBElements());
	}
	
	public ParserRule getADD_SUBRule() {
		return getADD_SUBAccess().getRule();
	}

	//MULT_DIV returns EXPRESSION:
	//
	//	PrimaryExpression (({MULT.left=current} "*" | {DIV.left=current} "/") right=PrimaryExpression)*;
	public MULT_DIVElements getMULT_DIVAccess() {
		return (pMULT_DIV != null) ? pMULT_DIV : (pMULT_DIV = new MULT_DIVElements());
	}
	
	public ParserRule getMULT_DIVRule() {
		return getMULT_DIVAccess().getRule();
	}

	//PrimaryExpression returns EXPRESSION:
	//
	//	"(" EXPRESSION ")" | {NOT} "not" exp=PrimaryExpression | Atomic;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//Atomic returns EXPRESSION:
	//
	//	{intConstant} value=INTEGER | {realConstant} value=DECIMAL | {strConstant} value=STRING | {enumConstant}
	//
	//	value=ENUM_ELEMENT | {boolConstant} value=BOOLEAN | {bitConstant} value=BIT | {hexConstant} value=HEX | {VarExpRef}
	//
	//	vref=[AbstractVAR_DECL|IDENT];
	public AtomicElements getAtomicAccess() {
		return (pAtomic != null) ? pAtomic : (pAtomic = new AtomicElements());
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}

	//DECIMAL returns ecore::EDouble:
	//
	//	"-"? INT ("." INT);
	public DECIMALElements getDECIMALAccess() {
		return (pDECIMAL != null) ? pDECIMAL : (pDECIMAL = new DECIMALElements());
	}
	
	public ParserRule getDECIMALRule() {
		return getDECIMALAccess().getRule();
	}

	//INTEGER returns ecore::EInt:
	//
	//	"-"? INT;
	public INTEGERElements getINTEGERAccess() {
		return (pINTEGER != null) ? pINTEGER : (pINTEGER = new INTEGERElements());
	}
	
	public ParserRule getINTEGERRule() {
		return getINTEGERAccess().getRule();
	}

	/// *
	//
	// * terminals declaration
	//
	// * / terminal ENUM_ELEMENT:
	//
	//	"_" IDENT;
	public TerminalRule getENUM_ELEMENTRule() {
		return (tENUM_ELEMENT != null) ? tENUM_ELEMENT : (tENUM_ELEMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ENUM_ELEMENT"));
	} 

	//terminal BOOLEAN returns ecore::EBoolean:
	//
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return (tBOOLEAN != null) ? tBOOLEAN : (tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN"));
	} 

	//terminal HEX:
	//
	//	"0x" ("0".."9" | "A".."F")+;
	public TerminalRule getHEXRule() {
		return (tHEX != null) ? tHEX : (tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX"));
	} 

	//terminal IDENT:
	//
	//	("a".."z" | "A".."Z") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDENTRule() {
		return (tIDENT != null) ? tIDENT : (tIDENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IDENT"));
	} 

	//terminal BIT:
	//
	//	"$" ("0" | "1")+;
	public TerminalRule getBITRule() {
		return (tBIT != null) ? tBIT : (tBIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BIT"));
	} 

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
