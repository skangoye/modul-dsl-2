/*
* generated by Xtext
*/
package org.xtext.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.services.ModuleDslGrammarAccess;

public class ModuleDslParser extends AbstractContentAssistParser {
	
	@Inject
	private ModuleDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.ui.contentassist.antlr.internal.InternalModuleDslParser createParser() {
		org.xtext.ui.contentassist.antlr.internal.InternalModuleDslParser result = new org.xtext.ui.contentassist.antlr.internal.InternalModuleDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getCRITERIONAccess().getCritAlternatives_0(), "rule__CRITERION__CritAlternatives_0");
					put(grammarAccess.getDATASELAccess().getSelAlternatives_0(), "rule__DATASEL__SelAlternatives_0");
					put(grammarAccess.getAbstractVAR_DECLAccess().getAlternatives(), "rule__AbstractVAR_DECL__Alternatives");
					put(grammarAccess.getFlowAccess().getFlowAlternatives_0(), "rule__Flow__FlowAlternatives_0");
					put(grammarAccess.getTYPEAccess().getTypeAlternatives_0(), "rule__TYPE__TypeAlternatives_0");
					put(grammarAccess.getRANGEAccess().getAlternatives(), "rule__RANGE__Alternatives");
					put(grammarAccess.getINTERVALAccess().getLsqbrAlternatives_0_0(), "rule__INTERVAL__LsqbrAlternatives_0_0");
					put(grammarAccess.getINTERVALAccess().getRsqbrAlternatives_4_0(), "rule__INTERVAL__RsqbrAlternatives_4_0");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getSTATEMENTAccess().getAlternatives(), "rule__STATEMENT__Alternatives");
					put(grammarAccess.getEQUAL_DIFFAccess().getOpAlternatives_1_1_0(), "rule__EQUAL_DIFF__OpAlternatives_1_1_0");
					put(grammarAccess.getCOMPARISONAccess().getOpAlternatives_1_1_0(), "rule__COMPARISON__OpAlternatives_1_1_0");
					put(grammarAccess.getADD_SUBAccess().getAlternatives_1_0(), "rule__ADD_SUB__Alternatives_1_0");
					put(grammarAccess.getMULT_DIVAccess().getAlternatives_1_0(), "rule__MULT_DIV__Alternatives_1_0");
					put(grammarAccess.getPrimaryExpressionAccess().getAlternatives(), "rule__PrimaryExpression__Alternatives");
					put(grammarAccess.getAtomicAccess().getAlternatives(), "rule__Atomic__Alternatives");
					put(grammarAccess.getMODULE_DECLAccess().getGroup(), "rule__MODULE_DECL__Group__0");
					put(grammarAccess.getSTRATEGYAccess().getGroup(), "rule__STRATEGY__Group__0");
					put(grammarAccess.getINTERFACEAccess().getGroup(), "rule__INTERFACE__Group__0");
					put(grammarAccess.getBODYAccess().getGroup(), "rule__BODY__Group__0");
					put(grammarAccess.getCRITERION_DECLAccess().getGroup(), "rule__CRITERION_DECL__Group__0");
					put(grammarAccess.getDATASEL_DECLAccess().getGroup(), "rule__DATASEL_DECL__Group__0");
					put(grammarAccess.getDATASEL_DECLAccess().getGroup_4(), "rule__DATASEL_DECL__Group_4__0");
					put(grammarAccess.getVAR_DECLAccess().getGroup(), "rule__VAR_DECL__Group__0");
					put(grammarAccess.getCST_DECLAccess().getGroup(), "rule__CST_DECL__Group__0");
					put(grammarAccess.getTmpVAR_DECLAccess().getGroup(), "rule__TmpVAR_DECL__Group__0");
					put(grammarAccess.getINTERVALAccess().getGroup(), "rule__INTERVAL__Group__0");
					put(grammarAccess.getLSETAccess().getGroup(), "rule__LSET__Group__0");
					put(grammarAccess.getLSETAccess().getGroup_3(), "rule__LSET__Group_3__0");
					put(grammarAccess.getLiteralAccess().getGroup_0(), "rule__Literal__Group_0__0");
					put(grammarAccess.getLiteralAccess().getGroup_1(), "rule__Literal__Group_1__0");
					put(grammarAccess.getLiteralAccess().getGroup_2(), "rule__Literal__Group_2__0");
					put(grammarAccess.getLiteralAccess().getGroup_3(), "rule__Literal__Group_3__0");
					put(grammarAccess.getLiteralAccess().getGroup_4(), "rule__Literal__Group_4__0");
					put(grammarAccess.getLiteralAccess().getGroup_5(), "rule__Literal__Group_5__0");
					put(grammarAccess.getLiteralAccess().getGroup_6(), "rule__Literal__Group_6__0");
					put(grammarAccess.getLiteralAccess().getGroup_7(), "rule__Literal__Group_7__0");
					put(grammarAccess.getIF_STATEMENTAccess().getGroup(), "rule__IF_STATEMENT__Group__0");
					put(grammarAccess.getIF_STATEMENTAccess().getGroup_7(), "rule__IF_STATEMENT__Group_7__0");
					put(grammarAccess.getLOOP_STATEMENTAccess().getGroup(), "rule__LOOP_STATEMENT__Group__0");
					put(grammarAccess.getERROR_STATEMENTAccess().getGroup(), "rule__ERROR_STATEMENT__Group__0");
					put(grammarAccess.getASSIGN_STATEMENTAccess().getGroup(), "rule__ASSIGN_STATEMENT__Group__0");
					put(grammarAccess.getORAccess().getGroup(), "rule__OR__Group__0");
					put(grammarAccess.getORAccess().getGroup_1(), "rule__OR__Group_1__0");
					put(grammarAccess.getANDAccess().getGroup(), "rule__AND__Group__0");
					put(grammarAccess.getANDAccess().getGroup_1(), "rule__AND__Group_1__0");
					put(grammarAccess.getEQUAL_DIFFAccess().getGroup(), "rule__EQUAL_DIFF__Group__0");
					put(grammarAccess.getEQUAL_DIFFAccess().getGroup_1(), "rule__EQUAL_DIFF__Group_1__0");
					put(grammarAccess.getCOMPARISONAccess().getGroup(), "rule__COMPARISON__Group__0");
					put(grammarAccess.getCOMPARISONAccess().getGroup_1(), "rule__COMPARISON__Group_1__0");
					put(grammarAccess.getADD_SUBAccess().getGroup(), "rule__ADD_SUB__Group__0");
					put(grammarAccess.getADD_SUBAccess().getGroup_1(), "rule__ADD_SUB__Group_1__0");
					put(grammarAccess.getADD_SUBAccess().getGroup_1_0_0(), "rule__ADD_SUB__Group_1_0_0__0");
					put(grammarAccess.getADD_SUBAccess().getGroup_1_0_1(), "rule__ADD_SUB__Group_1_0_1__0");
					put(grammarAccess.getMULT_DIVAccess().getGroup(), "rule__MULT_DIV__Group__0");
					put(grammarAccess.getMULT_DIVAccess().getGroup_1(), "rule__MULT_DIV__Group_1__0");
					put(grammarAccess.getMULT_DIVAccess().getGroup_1_0_0(), "rule__MULT_DIV__Group_1_0_0__0");
					put(grammarAccess.getMULT_DIVAccess().getGroup_1_0_1(), "rule__MULT_DIV__Group_1_0_1__0");
					put(grammarAccess.getPrimaryExpressionAccess().getGroup_0(), "rule__PrimaryExpression__Group_0__0");
					put(grammarAccess.getPrimaryExpressionAccess().getGroup_1(), "rule__PrimaryExpression__Group_1__0");
					put(grammarAccess.getAtomicAccess().getGroup_0(), "rule__Atomic__Group_0__0");
					put(grammarAccess.getAtomicAccess().getGroup_1(), "rule__Atomic__Group_1__0");
					put(grammarAccess.getAtomicAccess().getGroup_2(), "rule__Atomic__Group_2__0");
					put(grammarAccess.getAtomicAccess().getGroup_3(), "rule__Atomic__Group_3__0");
					put(grammarAccess.getAtomicAccess().getGroup_4(), "rule__Atomic__Group_4__0");
					put(grammarAccess.getAtomicAccess().getGroup_5(), "rule__Atomic__Group_5__0");
					put(grammarAccess.getAtomicAccess().getGroup_6(), "rule__Atomic__Group_6__0");
					put(grammarAccess.getAtomicAccess().getGroup_7(), "rule__Atomic__Group_7__0");
					put(grammarAccess.getDECIMALAccess().getGroup(), "rule__DECIMAL__Group__0");
					put(grammarAccess.getDECIMALAccess().getGroup_2(), "rule__DECIMAL__Group_2__0");
					put(grammarAccess.getINTEGERAccess().getGroup(), "rule__INTEGER__Group__0");
					put(grammarAccess.getLANGUAGEAccess().getModulesAssignment(), "rule__LANGUAGE__ModulesAssignment");
					put(grammarAccess.getMODULE_DECLAccess().getNameAssignment_2(), "rule__MODULE_DECL__NameAssignment_2");
					put(grammarAccess.getMODULE_DECLAccess().getStrategyAssignment_4(), "rule__MODULE_DECL__StrategyAssignment_4");
					put(grammarAccess.getMODULE_DECLAccess().getInterfaceAssignment_5(), "rule__MODULE_DECL__InterfaceAssignment_5");
					put(grammarAccess.getMODULE_DECLAccess().getBodyAssignment_6(), "rule__MODULE_DECL__BodyAssignment_6");
					put(grammarAccess.getSTRATEGYAccess().getCritdeclAssignment_4(), "rule__STRATEGY__CritdeclAssignment_4");
					put(grammarAccess.getSTRATEGYAccess().getDataseldeclAssignment_5(), "rule__STRATEGY__DataseldeclAssignment_5");
					put(grammarAccess.getINTERFACEAccess().getDeclarationAssignment_4(), "rule__INTERFACE__DeclarationAssignment_4");
					put(grammarAccess.getBODYAccess().getStatementsAssignment_4(), "rule__BODY__StatementsAssignment_4");
					put(grammarAccess.getCRITERION_DECLAccess().getCritAssignment_3(), "rule__CRITERION_DECL__CritAssignment_3");
					put(grammarAccess.getDATASEL_DECLAccess().getData1Assignment_3(), "rule__DATASEL_DECL__Data1Assignment_3");
					put(grammarAccess.getDATASEL_DECLAccess().getData2Assignment_4_1(), "rule__DATASEL_DECL__Data2Assignment_4_1");
					put(grammarAccess.getCRITERIONAccess().getCritAssignment(), "rule__CRITERION__CritAssignment");
					put(grammarAccess.getDATASELAccess().getSelAssignment(), "rule__DATASEL__SelAssignment");
					put(grammarAccess.getVAR_DECLAccess().getFlowAssignment_1(), "rule__VAR_DECL__FlowAssignment_1");
					put(grammarAccess.getVAR_DECLAccess().getNameAssignment_2(), "rule__VAR_DECL__NameAssignment_2");
					put(grammarAccess.getVAR_DECLAccess().getTypeAssignment_4(), "rule__VAR_DECL__TypeAssignment_4");
					put(grammarAccess.getVAR_DECLAccess().getRangeAssignment_5(), "rule__VAR_DECL__RangeAssignment_5");
					put(grammarAccess.getFlowAccess().getFlowAssignment(), "rule__Flow__FlowAssignment");
					put(grammarAccess.getCST_DECLAccess().getFlowAssignment_1(), "rule__CST_DECL__FlowAssignment_1");
					put(grammarAccess.getCST_DECLAccess().getTypeAssignment_2(), "rule__CST_DECL__TypeAssignment_2");
					put(grammarAccess.getCST_DECLAccess().getNameAssignment_3(), "rule__CST_DECL__NameAssignment_3");
					put(grammarAccess.getCST_DECLAccess().getValueAssignment_5(), "rule__CST_DECL__ValueAssignment_5");
					put(grammarAccess.getTmpVAR_DECLAccess().getTypeAssignment_1(), "rule__TmpVAR_DECL__TypeAssignment_1");
					put(grammarAccess.getTmpVAR_DECLAccess().getNameAssignment_2(), "rule__TmpVAR_DECL__NameAssignment_2");
					put(grammarAccess.getTmpVAR_DECLAccess().getValueAssignment_4(), "rule__TmpVAR_DECL__ValueAssignment_4");
					put(grammarAccess.getTYPEAccess().getTypeAssignment(), "rule__TYPE__TypeAssignment");
					put(grammarAccess.getINTERVALAccess().getLsqbrAssignment_0(), "rule__INTERVAL__LsqbrAssignment_0");
					put(grammarAccess.getINTERVALAccess().getMinAssignment_1(), "rule__INTERVAL__MinAssignment_1");
					put(grammarAccess.getINTERVALAccess().getMaxAssignment_3(), "rule__INTERVAL__MaxAssignment_3");
					put(grammarAccess.getINTERVALAccess().getRsqbrAssignment_4(), "rule__INTERVAL__RsqbrAssignment_4");
					put(grammarAccess.getLSETAccess().getValueAssignment_2(), "rule__LSET__ValueAssignment_2");
					put(grammarAccess.getLSETAccess().getValueAssignment_3_1(), "rule__LSET__ValueAssignment_3_1");
					put(grammarAccess.getLiteralAccess().getValueAssignment_0_1(), "rule__Literal__ValueAssignment_0_1");
					put(grammarAccess.getLiteralAccess().getValueAssignment_1_1(), "rule__Literal__ValueAssignment_1_1");
					put(grammarAccess.getLiteralAccess().getValueAssignment_2_1(), "rule__Literal__ValueAssignment_2_1");
					put(grammarAccess.getLiteralAccess().getValueAssignment_3_1(), "rule__Literal__ValueAssignment_3_1");
					put(grammarAccess.getLiteralAccess().getValueAssignment_4_1(), "rule__Literal__ValueAssignment_4_1");
					put(grammarAccess.getLiteralAccess().getValueAssignment_5_1(), "rule__Literal__ValueAssignment_5_1");
					put(grammarAccess.getLiteralAccess().getValueAssignment_6_1(), "rule__Literal__ValueAssignment_6_1");
					put(grammarAccess.getLiteralAccess().getValueAssignment_7_1(), "rule__Literal__ValueAssignment_7_1");
					put(grammarAccess.getIF_STATEMENTAccess().getIfCondAssignment_2(), "rule__IF_STATEMENT__IfCondAssignment_2");
					put(grammarAccess.getIF_STATEMENTAccess().getIfstAssignment_5(), "rule__IF_STATEMENT__IfstAssignment_5");
					put(grammarAccess.getIF_STATEMENTAccess().getElstAssignment_7_2(), "rule__IF_STATEMENT__ElstAssignment_7_2");
					put(grammarAccess.getLOOP_STATEMENTAccess().getLoopCondAssignment_2(), "rule__LOOP_STATEMENT__LoopCondAssignment_2");
					put(grammarAccess.getASSIGN_STATEMENTAccess().getLeftAssignment_0(), "rule__ASSIGN_STATEMENT__LeftAssignment_0");
					put(grammarAccess.getASSIGN_STATEMENTAccess().getRightAssignment_2(), "rule__ASSIGN_STATEMENT__RightAssignment_2");
					put(grammarAccess.getVAR_REFAccess().getVariableAssignment(), "rule__VAR_REF__VariableAssignment");
					put(grammarAccess.getORAccess().getRightAssignment_1_2(), "rule__OR__RightAssignment_1_2");
					put(grammarAccess.getANDAccess().getRightAssignment_1_2(), "rule__AND__RightAssignment_1_2");
					put(grammarAccess.getEQUAL_DIFFAccess().getOpAssignment_1_1(), "rule__EQUAL_DIFF__OpAssignment_1_1");
					put(grammarAccess.getEQUAL_DIFFAccess().getRightAssignment_1_2(), "rule__EQUAL_DIFF__RightAssignment_1_2");
					put(grammarAccess.getCOMPARISONAccess().getOpAssignment_1_1(), "rule__COMPARISON__OpAssignment_1_1");
					put(grammarAccess.getCOMPARISONAccess().getRightAssignment_1_2(), "rule__COMPARISON__RightAssignment_1_2");
					put(grammarAccess.getADD_SUBAccess().getRightAssignment_1_1(), "rule__ADD_SUB__RightAssignment_1_1");
					put(grammarAccess.getMULT_DIVAccess().getRightAssignment_1_1(), "rule__MULT_DIV__RightAssignment_1_1");
					put(grammarAccess.getPrimaryExpressionAccess().getExpAssignment_1_2(), "rule__PrimaryExpression__ExpAssignment_1_2");
					put(grammarAccess.getAtomicAccess().getValueAssignment_0_1(), "rule__Atomic__ValueAssignment_0_1");
					put(grammarAccess.getAtomicAccess().getValueAssignment_1_1(), "rule__Atomic__ValueAssignment_1_1");
					put(grammarAccess.getAtomicAccess().getValueAssignment_2_1(), "rule__Atomic__ValueAssignment_2_1");
					put(grammarAccess.getAtomicAccess().getValueAssignment_3_1(), "rule__Atomic__ValueAssignment_3_1");
					put(grammarAccess.getAtomicAccess().getValueAssignment_4_1(), "rule__Atomic__ValueAssignment_4_1");
					put(grammarAccess.getAtomicAccess().getValueAssignment_5_1(), "rule__Atomic__ValueAssignment_5_1");
					put(grammarAccess.getAtomicAccess().getValueAssignment_6_1(), "rule__Atomic__ValueAssignment_6_1");
					put(grammarAccess.getAtomicAccess().getVrefAssignment_7_1(), "rule__Atomic__VrefAssignment_7_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.ui.contentassist.antlr.internal.InternalModuleDslParser typedParser = (org.xtext.ui.contentassist.antlr.internal.InternalModuleDslParser) parser;
			typedParser.entryRuleLANGUAGE();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ModuleDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ModuleDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
